// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXNzYWdlcy5wcm90bxIIcHJvdG9jb2wiKQoGVmVjdG9yEgkKAXgYASAB",
            "KAISCQoBeRgCIAEoAhIJCgF6GAMgASgCIvEBChRVcGRhdGVQbGF5ZXJQb3Np",
            "dGlvbhIiCghwb3NpdGlvbhgBIAEoCzIQLnByb3RvY29sLlZlY3RvchIjCglk",
            "aXJlY3Rpb24YAiABKAsyEC5wcm90b2NvbC5WZWN0b3ISHwoFc2NhbGUYAyAB",
            "KAsyEC5wcm90b2NvbC5WZWN0b3ISDAoEdXNlchgEIAEoCRIiCgh2ZWxvY2l0",
            "eRgFIAEoCzIQLnByb3RvY29sLlZlY3RvchIQCghjYXJfdHlwZRgGIAEoBRIN",
            "CgVjYXJfchgHIAEoBRINCgVjYXJfZxgIIAEoBRINCgVjYXJfYhgJIAEoBSKX",
            "AgoSVXBkYXRlUGxheWVyU3RhdHVzEhQKDHdlbnRfdGhyb3VnaBgBIAMoCBIR",
            "CglsYXBfY291bnQYAiABKAUSHQoVaGFzX2hpdF9zX2ZfbGluZV9vbmNlGAMg",
            "ASgIEhAKCGNwX2NvdW50GAQgASgFEh4KFm5leHRfY2hlY2twb2ludF9udW1i",
            "ZXIYBSABKAUSJwofc3VwcG9zZWRfbmV4dF9jaGVja3BvaW50X251bWJlchgG",
            "IAEoBRIMCgR1c2VyGAcgASgJEhkKEXZpcnR1YWxfbGFwX2NvdW50GAggASgF",
            "EhYKDmxhc3RfaGl0dGVkX2NwGAkgASgFEh0KFXNlY29uZF9sYXN0X2hpdHRl",
            "ZF9jcBgKIAEoBSIbChlVcGRhdGVQbGF5ZXJTdGF0dXNSZXF1ZXN0IiwKC0No",
            "YXRNZXNzYWdlEg8KB2NvbnRlbnQYASABKAkSDAoEdXNlchgCIAEoCSIaCgpE",
            "aXNjb25uZWN0EgwKBHVzZXIYASABKAkiSAoKQ3JlYXRlUm9vbRIRCglyb29t",
            "X3R5cGUYASABKAUSEgoKaWRfY2lyY3VpdBgCIAEoBRITCgttYXhfcGxheWVy",
            "cxgDIAEoBSIRCg9Sb29tTGlzdFJlcXVlc3QiPQoQUm9vbUxpc3RSZXNwb25z",
            "ZRIpCglyb29tX2xpc3QYASADKAsyFi5wcm90b2NvbC5Sb29tTGlzdEl0ZW0i",
            "qQEKDFJvb21MaXN0SXRlbRIKCgJpZBgBIAEoCRIRCglyb29tX3R5cGUYAiAB",
            "KAUSEgoKaWRfY2lyY3VpdBgDIAEoBRITCgttYXhfcGxheWVycxgEIAEoBRIS",
            "CgpuYl9wbGF5ZXJzGAUgASgFEiEKB3BsYXllcnMYBiADKAsyEC5wcm90b2Nv",
            "bC5QbGF5ZXISGgoSc3RhcnRpbmdfcG9zaXRpb25zGAcgAygFIk0KBlBsYXll",
            "chIQCgh1c2VybmFtZRgBIAEoCRIQCghuYl9yYWNlcxgCIAEoBRIPCgduYl93",
            "aW5zGAMgASgFEg4KBnJlY29yZBgEIAEoCSJCCglTdGFydFJvb20SDwoHc3Vj",
            "Y2VzcxgBIAEoCBIkCgRyb29tGAIgASgLMhYucHJvdG9jb2wuUm9vbUxpc3RJ",
            "dGVtIh0KD0pvaW5Sb29tUmVxdWVzdBIKCgJpZBgBIAEoCSJJChBKb2luUm9v",
            "bVJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSJAoEcm9vbRgCIAEoCzIWLnBy",
            "b3RvY29sLlJvb21MaXN0SXRlbSIkChBTdGFydGluZ1Bvc2l0aW9uEhAKCHBv",
            "c2l0aW9uGAEgAygFIjUKD1JlZ2lzdGVyUmVxdWVzdBIQCgh1c2VybmFtZRgB",
            "IAEoCRIQCghwYXNzd29yZBgCIAEoCSIyCgxMb2dpblJlcXVlc3QSEAoIdXNl",
            "cm5hbWUYASABKAkSEAoIcGFzc3dvcmQYAiABKAkiXgoQUmVnaXN0ZXJSZXNw",
            "b25zZRIPCgdzdWNjZXNzGAEgASgIEhAKCHVzZXJuYW1lGAIgASgJEicKCnVz",
            "ZXJfc3RhdHMYAyABKAsyEy5wcm90b2NvbC5Vc2VyU3RhdHMiWwoNTG9naW5S",
            "ZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIEhAKCHVzZXJuYW1lGAIgASgJEicK",
            "CnVzZXJfc3RhdHMYAyABKAsyEy5wcm90b2NvbC5Vc2VyU3RhdHMiIgoOQ2hh",
            "bmdlVXNlcm5hbWUSEAoIdXNlcm5hbWUYASABKAkisgYKCVVzZXJTdGF0cxIQ",
            "Cgh1c2VybmFtZRgBIAEoCRIMCgRyYWNlGAIgASgFEg8KB3ZpY3RvcnkYAyAB",
            "KAUSEAoIcmVjb3JkdDEYBCABKAkSEAoIcmVjb3JkdDIYBSABKAkSEAoIcmVj",
            "b3JkdDMYBiABKAkSDwoHY2FyMXJlZBgHIAEoBRIRCgljYXIxZ3JlZW4YCCAB",
            "KAUSEAoIY2FyMWJsdWUYCSABKAUSDwoHY2FyMnJlZBgKIAEoBRIRCgljYXIy",
            "Z3JlZW4YCyABKAUSEAoIY2FyMmJsdWUYDCABKAUSDwoHY2FyM3JlZBgNIAEo",
            "BRIRCgljYXIzZ3JlZW4YDiABKAUSEAoIY2FyM2JsdWUYDyABKAUSDwoHY2Fy",
            "NHJlZBgQIAEoBRIRCgljYXI0Z3JlZW4YESABKAUSEAoIY2FyNGJsdWUYEiAB",
            "KAUSEgoKY2FyMXNsaWRlchgTIAEoAhIRCgljYXIxcmVkVFIYFCABKAUSEwoL",
            "Y2FyMWdyZWVuVFIYFSABKAUSEgoKY2FyMWJsdWVUUhgWIAEoBRITCgtjYXIx",
            "Y3Vyc29yWBgXIAEoAhITCgtjYXIxY3Vyc29yWRgYIAEoAhISCgpjYXIyc2xp",
            "ZGVyGBkgASgCEhEKCWNhcjJyZWRUUhgaIAEoBRITCgtjYXIyZ3JlZW5UUhgb",
            "IAEoBRISCgpjYXIyYmx1ZVRSGBwgASgFEhMKC2NhcjJjdXJzb3JYGB0gASgC",
            "EhMKC2NhcjJjdXJzb3JZGB4gASgCEhIKCmNhcjNzbGlkZXIYHyABKAISEQoJ",
            "Y2FyM3JlZFRSGCAgASgFEhMKC2NhcjNncmVlblRSGCEgASgFEhIKCmNhcjNi",
            "bHVlVFIYIiABKAUSEwoLY2FyM2N1cnNvclgYIyABKAISEwoLY2FyM2N1cnNv",
            "clkYJCABKAISEgoKY2FyNHNsaWRlchglIAEoAhIRCgljYXI0cmVkVFIYJiAB",
            "KAUSEwoLY2FyNGdyZWVuVFIYJyABKAUSEgoKY2FyNGJsdWVUUhgoIAEoBRIT",
            "CgtjYXI0Y3Vyc29yWBgpIAEoAhITCgtjYXI0Y3Vyc29yWRgqIAEoAiI3CgxT",
            "ZXRVc2VyU3RhdHMSJwoKdXNlcl9zdGF0cxgBIAEoCzITLnByb3RvY29sLlVz",
            "ZXJTdGF0cyI8ChFVc2VyU3RhdHNSZXNwb25zZRInCgp1c2VyX3N0YXRzGAEg",
            "ASgLMhMucHJvdG9jb2wuVXNlclN0YXRzIg4KDEdldFVzZXJTdGF0cyILCglM",
            "ZWF2ZVJvb20iIAoPR2V0R2xvYmFsUmVjb3JkEg0KBXRyYWNrGAEgASgFIjAK",
            "D1NldEdsb2JhbFJlY29yZBINCgV0cmFjaxgBIAEoBRIOCgZyZWNvcmQYAiAB",
            "KAkiwwkKB01lc3NhZ2USDAoEdHlwZRgBIAEoCRItCgxjaGF0X21lc3NhZ2UY",
            "AiABKAsyFS5wcm90b2NvbC5DaGF0TWVzc2FnZUgAEkAKFnVwZGF0ZV9wbGF5",
            "ZXJfcG9zaXRpb24YAyABKAsyHi5wcm90b2NvbC5VcGRhdGVQbGF5ZXJQb3Np",
            "dGlvbkgAEjwKFHVwZGF0ZV9wbGF5ZXJfc3RhdHVzGAQgASgLMhwucHJvdG9j",
            "b2wuVXBkYXRlUGxheWVyU3RhdHVzSAASKgoKZGlzY29ubmVjdBgFIAEoCzIU",
            "LnByb3RvY29sLkRpc2Nvbm5lY3RIABJLChx1cGRhdGVfcGxheWVyX3N0YXR1",
            "c19yZXF1ZXN0GAYgASgLMiMucHJvdG9jb2wuVXBkYXRlUGxheWVyU3RhdHVz",
            "UmVxdWVzdEgAEisKC2NyZWF0ZV9yb29tGAcgASgLMhQucHJvdG9jb2wuQ3Jl",
            "YXRlUm9vbUgAEikKCnN0YXJ0X3Jvb20YCCABKAsyEy5wcm90b2NvbC5TdGFy",
            "dFJvb21IABI2ChFqb2luX3Jvb21fcmVxdWVzdBgJIAEoCzIZLnByb3RvY29s",
            "LkpvaW5Sb29tUmVxdWVzdEgAEjcKEXN0YXJ0aW5nX3Bvc2l0aW9uGAogASgL",
            "MhoucHJvdG9jb2wuU3RhcnRpbmdQb3NpdGlvbkgAEjUKEHJlZ2lzdGVyX3Jl",
            "cXVlc3QYCyABKAsyGS5wcm90b2NvbC5SZWdpc3RlclJlcXVlc3RIABIvCg1s",
            "b2dpbl9yZXF1ZXN0GAwgASgLMhYucHJvdG9jb2wuTG9naW5SZXF1ZXN0SAAS",
            "NwoRcmVnaXN0ZXJfcmVzcG9uc2UYDSABKAsyGi5wcm90b2NvbC5SZWdpc3Rl",
            "clJlc3BvbnNlSAASMQoObG9naW5fcmVzcG9uc2UYDiABKAsyFy5wcm90b2Nv",
            "bC5Mb2dpblJlc3BvbnNlSAASNgoRcm9vbV9saXN0X3JlcXVlc3QYDyABKAsy",
            "GS5wcm90b2NvbC5Sb29tTGlzdFJlcXVlc3RIABI4ChJyb29tX2xpc3RfcmVz",
            "cG9uc2UYECABKAsyGi5wcm90b2NvbC5Sb29tTGlzdFJlc3BvbnNlSAASMwoP",
            "Y2hhbmdlX3VzZXJuYW1lGBEgASgLMhgucHJvdG9jb2wuQ2hhbmdlVXNlcm5h",
            "bWVIABI4ChJqb2luX3Jvb21fcmVzcG9uc2UYEiABKAsyGi5wcm90b2NvbC5K",
            "b2luUm9vbVJlc3BvbnNlSAASMAoOc2V0X3VzZXJfc3RhdHMYEyABKAsyFi5w",
            "cm90b2NvbC5TZXRVc2VyU3RhdHNIABIwCg5nZXRfdXNlcl9zdGF0cxgUIAEo",
            "CzIWLnByb3RvY29sLkdldFVzZXJTdGF0c0gAEikKCmxlYXZlX3Jvb20YFSAB",
            "KAsyEy5wcm90b2NvbC5MZWF2ZVJvb21IABI2ChFnZXRfZ2xvYmFsX3JlY29y",
            "ZBgWIAEoCzIZLnByb3RvY29sLkdldEdsb2JhbFJlY29yZEgAEjYKEXNldF9n",
            "bG9iYWxfcmVjb3JkGBcgASgLMhkucHJvdG9jb2wuU2V0R2xvYmFsUmVjb3Jk",
            "SABCBQoDbXNnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Vector), global::Protocol.Vector.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UpdatePlayerPosition), global::Protocol.UpdatePlayerPosition.Parser, new[]{ "Position", "Direction", "Scale", "User", "Velocity", "CarType", "CarR", "CarG", "CarB" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UpdatePlayerStatus), global::Protocol.UpdatePlayerStatus.Parser, new[]{ "WentThrough", "LapCount", "HasHitSFLineOnce", "CpCount", "NextCheckpointNumber", "SupposedNextCheckpointNumber", "User", "VirtualLapCount", "LastHittedCp", "SecondLastHittedCp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UpdatePlayerStatusRequest), global::Protocol.UpdatePlayerStatusRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChatMessage), global::Protocol.ChatMessage.Parser, new[]{ "Content", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Disconnect), global::Protocol.Disconnect.Parser, new[]{ "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CreateRoom), global::Protocol.CreateRoom.Parser, new[]{ "RoomType", "IdCircuit", "MaxPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RoomListRequest), global::Protocol.RoomListRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RoomListResponse), global::Protocol.RoomListResponse.Parser, new[]{ "RoomList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RoomListItem), global::Protocol.RoomListItem.Parser, new[]{ "Id", "RoomType", "IdCircuit", "MaxPlayers", "NbPlayers", "Players", "StartingPositions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Player), global::Protocol.Player.Parser, new[]{ "Username", "NbRaces", "NbWins", "Record" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.StartRoom), global::Protocol.StartRoom.Parser, new[]{ "Success", "Room" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.JoinRoomRequest), global::Protocol.JoinRoomRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.JoinRoomResponse), global::Protocol.JoinRoomResponse.Parser, new[]{ "Success", "Room" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.StartingPosition), global::Protocol.StartingPosition.Parser, new[]{ "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RegisterRequest), global::Protocol.RegisterRequest.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LoginRequest), global::Protocol.LoginRequest.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RegisterResponse), global::Protocol.RegisterResponse.Parser, new[]{ "Success", "Username", "UserStats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LoginResponse), global::Protocol.LoginResponse.Parser, new[]{ "Success", "Username", "UserStats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChangeUsername), global::Protocol.ChangeUsername.Parser, new[]{ "Username" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UserStats), global::Protocol.UserStats.Parser, new[]{ "Username", "Race", "Victory", "Recordt1", "Recordt2", "Recordt3", "Car1Red", "Car1Green", "Car1Blue", "Car2Red", "Car2Green", "Car2Blue", "Car3Red", "Car3Green", "Car3Blue", "Car4Red", "Car4Green", "Car4Blue", "Car1Slider", "Car1RedTR", "Car1GreenTR", "Car1BlueTR", "Car1CursorX", "Car1CursorY", "Car2Slider", "Car2RedTR", "Car2GreenTR", "Car2BlueTR", "Car2CursorX", "Car2CursorY", "Car3Slider", "Car3RedTR", "Car3GreenTR", "Car3BlueTR", "Car3CursorX", "Car3CursorY", "Car4Slider", "Car4RedTR", "Car4GreenTR", "Car4BlueTR", "Car4CursorX", "Car4CursorY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SetUserStats), global::Protocol.SetUserStats.Parser, new[]{ "UserStats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UserStatsResponse), global::Protocol.UserStatsResponse.Parser, new[]{ "UserStats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GetUserStats), global::Protocol.GetUserStats.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LeaveRoom), global::Protocol.LeaveRoom.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.GetGlobalRecord), global::Protocol.GetGlobalRecord.Parser, new[]{ "Track" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SetGlobalRecord), global::Protocol.SetGlobalRecord.Parser, new[]{ "Track", "Record" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message), global::Protocol.Message.Parser, new[]{ "Type", "ChatMessage", "UpdatePlayerPosition", "UpdatePlayerStatus", "Disconnect", "UpdatePlayerStatusRequest", "CreateRoom", "StartRoom", "JoinRoomRequest", "StartingPosition", "RegisterRequest", "LoginRequest", "RegisterResponse", "LoginResponse", "RoomListRequest", "RoomListResponse", "ChangeUsername", "JoinRoomResponse", "SetUserStats", "GetUserStats", "LeaveRoom", "GetGlobalRecord", "SetGlobalRecord" }, new[]{ "Msg" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Vector3
  /// </summary>
  public sealed partial class Vector : pb::IMessage<Vector> {
    private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector(Vector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector Clone() {
      return new Vector(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  update the position of a user
  /// </summary>
  public sealed partial class UpdatePlayerPosition : pb::IMessage<UpdatePlayerPosition> {
    private static readonly pb::MessageParser<UpdatePlayerPosition> _parser = new pb::MessageParser<UpdatePlayerPosition>(() => new UpdatePlayerPosition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePlayerPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerPosition(UpdatePlayerPosition other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      Direction = other.direction_ != null ? other.Direction.Clone() : null;
      Scale = other.scale_ != null ? other.Scale.Clone() : null;
      user_ = other.user_;
      Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
      carType_ = other.carType_;
      carR_ = other.carR_;
      carG_ = other.carG_;
      carB_ = other.carB_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerPosition Clone() {
      return new UpdatePlayerPosition(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Protocol.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private global::Protocol.Vector direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Vector Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private global::Protocol.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 4;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 5;
    private global::Protocol.Vector velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Vector Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "car_type" field.</summary>
    public const int CarTypeFieldNumber = 6;
    private int carType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarType {
      get { return carType_; }
      set {
        carType_ = value;
      }
    }

    /// <summary>Field number for the "car_r" field.</summary>
    public const int CarRFieldNumber = 7;
    private int carR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarR {
      get { return carR_; }
      set {
        carR_ = value;
      }
    }

    /// <summary>Field number for the "car_g" field.</summary>
    public const int CarGFieldNumber = 8;
    private int carG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarG {
      get { return carG_; }
      set {
        carG_ = value;
      }
    }

    /// <summary>Field number for the "car_b" field.</summary>
    public const int CarBFieldNumber = 9;
    private int carB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarB {
      get { return carB_; }
      set {
        carB_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePlayerPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePlayerPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (User != other.User) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (CarType != other.CarType) return false;
      if (CarR != other.CarR) return false;
      if (CarG != other.CarG) return false;
      if (CarB != other.CarB) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (CarType != 0) hash ^= CarType.GetHashCode();
      if (CarR != 0) hash ^= CarR.GetHashCode();
      if (CarG != 0) hash ^= CarG.GetHashCode();
      if (CarB != 0) hash ^= CarB.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (direction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Direction);
      }
      if (scale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scale);
      }
      if (User.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(User);
      }
      if (velocity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Velocity);
      }
      if (CarType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CarType);
      }
      if (CarR != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CarR);
      }
      if (CarG != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CarG);
      }
      if (CarB != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CarB);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (CarType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CarType);
      }
      if (CarR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CarR);
      }
      if (CarG != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CarG);
      }
      if (CarB != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CarB);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePlayerPosition other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Protocol.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          direction_ = new global::Protocol.Vector();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          scale_ = new global::Protocol.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::Protocol.Vector();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.CarType != 0) {
        CarType = other.CarType;
      }
      if (other.CarR != 0) {
        CarR = other.CarR;
      }
      if (other.CarG != 0) {
        CarG = other.CarG;
      }
      if (other.CarB != 0) {
        CarB = other.CarB;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Protocol.Vector();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (direction_ == null) {
              direction_ = new global::Protocol.Vector();
            }
            input.ReadMessage(direction_);
            break;
          }
          case 26: {
            if (scale_ == null) {
              scale_ = new global::Protocol.Vector();
            }
            input.ReadMessage(scale_);
            break;
          }
          case 34: {
            User = input.ReadString();
            break;
          }
          case 42: {
            if (velocity_ == null) {
              velocity_ = new global::Protocol.Vector();
            }
            input.ReadMessage(velocity_);
            break;
          }
          case 48: {
            CarType = input.ReadInt32();
            break;
          }
          case 56: {
            CarR = input.ReadInt32();
            break;
          }
          case 64: {
            CarG = input.ReadInt32();
            break;
          }
          case 72: {
            CarB = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  update the status of a player
  /// </summary>
  public sealed partial class UpdatePlayerStatus : pb::IMessage<UpdatePlayerStatus> {
    private static readonly pb::MessageParser<UpdatePlayerStatus> _parser = new pb::MessageParser<UpdatePlayerStatus>(() => new UpdatePlayerStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePlayerStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStatus(UpdatePlayerStatus other) : this() {
      wentThrough_ = other.wentThrough_.Clone();
      lapCount_ = other.lapCount_;
      hasHitSFLineOnce_ = other.hasHitSFLineOnce_;
      cpCount_ = other.cpCount_;
      nextCheckpointNumber_ = other.nextCheckpointNumber_;
      supposedNextCheckpointNumber_ = other.supposedNextCheckpointNumber_;
      user_ = other.user_;
      virtualLapCount_ = other.virtualLapCount_;
      lastHittedCp_ = other.lastHittedCp_;
      secondLastHittedCp_ = other.secondLastHittedCp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStatus Clone() {
      return new UpdatePlayerStatus(this);
    }

    /// <summary>Field number for the "went_through" field.</summary>
    public const int WentThroughFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_wentThrough_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> wentThrough_ = new pbc::RepeatedField<bool>();
    /// <summary>
    ///  tableau de booléens
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> WentThrough {
      get { return wentThrough_; }
    }

    /// <summary>Field number for the "lap_count" field.</summary>
    public const int LapCountFieldNumber = 2;
    private int lapCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LapCount {
      get { return lapCount_; }
      set {
        lapCount_ = value;
      }
    }

    /// <summary>Field number for the "has_hit_s_f_line_once" field.</summary>
    public const int HasHitSFLineOnceFieldNumber = 3;
    private bool hasHitSFLineOnce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHitSFLineOnce {
      get { return hasHitSFLineOnce_; }
      set {
        hasHitSFLineOnce_ = value;
      }
    }

    /// <summary>Field number for the "cp_count" field.</summary>
    public const int CpCountFieldNumber = 4;
    private int cpCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CpCount {
      get { return cpCount_; }
      set {
        cpCount_ = value;
      }
    }

    /// <summary>Field number for the "next_checkpoint_number" field.</summary>
    public const int NextCheckpointNumberFieldNumber = 5;
    private int nextCheckpointNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextCheckpointNumber {
      get { return nextCheckpointNumber_; }
      set {
        nextCheckpointNumber_ = value;
      }
    }

    /// <summary>Field number for the "supposed_next_checkpoint_number" field.</summary>
    public const int SupposedNextCheckpointNumberFieldNumber = 6;
    private int supposedNextCheckpointNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SupposedNextCheckpointNumber {
      get { return supposedNextCheckpointNumber_; }
      set {
        supposedNextCheckpointNumber_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 7;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "virtual_lap_count" field.</summary>
    public const int VirtualLapCountFieldNumber = 8;
    private int virtualLapCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VirtualLapCount {
      get { return virtualLapCount_; }
      set {
        virtualLapCount_ = value;
      }
    }

    /// <summary>Field number for the "last_hitted_cp" field.</summary>
    public const int LastHittedCpFieldNumber = 9;
    private int lastHittedCp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastHittedCp {
      get { return lastHittedCp_; }
      set {
        lastHittedCp_ = value;
      }
    }

    /// <summary>Field number for the "second_last_hitted_cp" field.</summary>
    public const int SecondLastHittedCpFieldNumber = 10;
    private int secondLastHittedCp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondLastHittedCp {
      get { return secondLastHittedCp_; }
      set {
        secondLastHittedCp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePlayerStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePlayerStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!wentThrough_.Equals(other.wentThrough_)) return false;
      if (LapCount != other.LapCount) return false;
      if (HasHitSFLineOnce != other.HasHitSFLineOnce) return false;
      if (CpCount != other.CpCount) return false;
      if (NextCheckpointNumber != other.NextCheckpointNumber) return false;
      if (SupposedNextCheckpointNumber != other.SupposedNextCheckpointNumber) return false;
      if (User != other.User) return false;
      if (VirtualLapCount != other.VirtualLapCount) return false;
      if (LastHittedCp != other.LastHittedCp) return false;
      if (SecondLastHittedCp != other.SecondLastHittedCp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= wentThrough_.GetHashCode();
      if (LapCount != 0) hash ^= LapCount.GetHashCode();
      if (HasHitSFLineOnce != false) hash ^= HasHitSFLineOnce.GetHashCode();
      if (CpCount != 0) hash ^= CpCount.GetHashCode();
      if (NextCheckpointNumber != 0) hash ^= NextCheckpointNumber.GetHashCode();
      if (SupposedNextCheckpointNumber != 0) hash ^= SupposedNextCheckpointNumber.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (VirtualLapCount != 0) hash ^= VirtualLapCount.GetHashCode();
      if (LastHittedCp != 0) hash ^= LastHittedCp.GetHashCode();
      if (SecondLastHittedCp != 0) hash ^= SecondLastHittedCp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      wentThrough_.WriteTo(output, _repeated_wentThrough_codec);
      if (LapCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LapCount);
      }
      if (HasHitSFLineOnce != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasHitSFLineOnce);
      }
      if (CpCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CpCount);
      }
      if (NextCheckpointNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NextCheckpointNumber);
      }
      if (SupposedNextCheckpointNumber != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SupposedNextCheckpointNumber);
      }
      if (User.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(User);
      }
      if (VirtualLapCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VirtualLapCount);
      }
      if (LastHittedCp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LastHittedCp);
      }
      if (SecondLastHittedCp != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SecondLastHittedCp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += wentThrough_.CalculateSize(_repeated_wentThrough_codec);
      if (LapCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LapCount);
      }
      if (HasHitSFLineOnce != false) {
        size += 1 + 1;
      }
      if (CpCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpCount);
      }
      if (NextCheckpointNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextCheckpointNumber);
      }
      if (SupposedNextCheckpointNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SupposedNextCheckpointNumber);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (VirtualLapCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualLapCount);
      }
      if (LastHittedCp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastHittedCp);
      }
      if (SecondLastHittedCp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondLastHittedCp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePlayerStatus other) {
      if (other == null) {
        return;
      }
      wentThrough_.Add(other.wentThrough_);
      if (other.LapCount != 0) {
        LapCount = other.LapCount;
      }
      if (other.HasHitSFLineOnce != false) {
        HasHitSFLineOnce = other.HasHitSFLineOnce;
      }
      if (other.CpCount != 0) {
        CpCount = other.CpCount;
      }
      if (other.NextCheckpointNumber != 0) {
        NextCheckpointNumber = other.NextCheckpointNumber;
      }
      if (other.SupposedNextCheckpointNumber != 0) {
        SupposedNextCheckpointNumber = other.SupposedNextCheckpointNumber;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.VirtualLapCount != 0) {
        VirtualLapCount = other.VirtualLapCount;
      }
      if (other.LastHittedCp != 0) {
        LastHittedCp = other.LastHittedCp;
      }
      if (other.SecondLastHittedCp != 0) {
        SecondLastHittedCp = other.SecondLastHittedCp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            wentThrough_.AddEntriesFrom(input, _repeated_wentThrough_codec);
            break;
          }
          case 16: {
            LapCount = input.ReadInt32();
            break;
          }
          case 24: {
            HasHitSFLineOnce = input.ReadBool();
            break;
          }
          case 32: {
            CpCount = input.ReadInt32();
            break;
          }
          case 40: {
            NextCheckpointNumber = input.ReadInt32();
            break;
          }
          case 48: {
            SupposedNextCheckpointNumber = input.ReadInt32();
            break;
          }
          case 58: {
            User = input.ReadString();
            break;
          }
          case 64: {
            VirtualLapCount = input.ReadInt32();
            break;
          }
          case 72: {
            LastHittedCp = input.ReadInt32();
            break;
          }
          case 80: {
            SecondLastHittedCp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  request other players status
  /// </summary>
  public sealed partial class UpdatePlayerStatusRequest : pb::IMessage<UpdatePlayerStatusRequest> {
    private static readonly pb::MessageParser<UpdatePlayerStatusRequest> _parser = new pb::MessageParser<UpdatePlayerStatusRequest>(() => new UpdatePlayerStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePlayerStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStatusRequest(UpdatePlayerStatusRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStatusRequest Clone() {
      return new UpdatePlayerStatusRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePlayerStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePlayerStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePlayerStatusRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  definition of a chat message
  /// </summary>
  public sealed partial class ChatMessage : pb::IMessage<ChatMessage> {
    private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage(ChatMessage other) : this() {
      content_ = other.content_;
      user_ = other.user_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage Clone() {
      return new ChatMessage(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (User != other.User) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (User.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 18: {
            User = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  when a user is disconnecting, he will automatically send this kind of message
  ///  to others
  /// </summary>
  public sealed partial class Disconnect : pb::IMessage<Disconnect> {
    private static readonly pb::MessageParser<Disconnect> _parser = new pb::MessageParser<Disconnect>(() => new Disconnect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Disconnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Disconnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Disconnect(Disconnect other) : this() {
      user_ = other.user_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Disconnect Clone() {
      return new Disconnect(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Disconnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Disconnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (User != other.User) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (User.Length != 0) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (User.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Disconnect other) {
      if (other == null) {
        return;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            User = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  request to create a new room
  /// </summary>
  public sealed partial class CreateRoom : pb::IMessage<CreateRoom> {
    private static readonly pb::MessageParser<CreateRoom> _parser = new pb::MessageParser<CreateRoom>(() => new CreateRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom(CreateRoom other) : this() {
      roomType_ = other.roomType_;
      idCircuit_ = other.idCircuit_;
      maxPlayers_ = other.maxPlayers_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom Clone() {
      return new CreateRoom(this);
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private int roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "id_circuit" field.</summary>
    public const int IdCircuitFieldNumber = 2;
    private int idCircuit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdCircuit {
      get { return idCircuit_; }
      set {
        idCircuit_ = value;
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 3;
    private int maxPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomType != other.RoomType) return false;
      if (IdCircuit != other.IdCircuit) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      if (IdCircuit != 0) hash ^= IdCircuit.GetHashCode();
      if (MaxPlayers != 0) hash ^= MaxPlayers.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomType);
      }
      if (IdCircuit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IdCircuit);
      }
      if (MaxPlayers != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxPlayers);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      if (IdCircuit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdCircuit);
      }
      if (MaxPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayers);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoom other) {
      if (other == null) {
        return;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      if (other.IdCircuit != 0) {
        IdCircuit = other.IdCircuit;
      }
      if (other.MaxPlayers != 0) {
        MaxPlayers = other.MaxPlayers;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomType = input.ReadInt32();
            break;
          }
          case 16: {
            IdCircuit = input.ReadInt32();
            break;
          }
          case 24: {
            MaxPlayers = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomListRequest : pb::IMessage<RoomListRequest> {
    private static readonly pb::MessageParser<RoomListRequest> _parser = new pb::MessageParser<RoomListRequest>(() => new RoomListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListRequest(RoomListRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListRequest Clone() {
      return new RoomListRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomListRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RoomListResponse : pb::IMessage<RoomListResponse> {
    private static readonly pb::MessageParser<RoomListResponse> _parser = new pb::MessageParser<RoomListResponse>(() => new RoomListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListResponse(RoomListResponse other) : this() {
      roomList_ = other.roomList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListResponse Clone() {
      return new RoomListResponse(this);
    }

    /// <summary>Field number for the "room_list" field.</summary>
    public const int RoomListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.RoomListItem> _repeated_roomList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.RoomListItem.Parser);
    private readonly pbc::RepeatedField<global::Protocol.RoomListItem> roomList_ = new pbc::RepeatedField<global::Protocol.RoomListItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.RoomListItem> RoomList {
      get { return roomList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roomList_.Equals(other.roomList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roomList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roomList_.WriteTo(output, _repeated_roomList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roomList_.CalculateSize(_repeated_roomList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomListResponse other) {
      if (other == null) {
        return;
      }
      roomList_.Add(other.roomList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roomList_.AddEntriesFrom(input, _repeated_roomList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomListItem : pb::IMessage<RoomListItem> {
    private static readonly pb::MessageParser<RoomListItem> _parser = new pb::MessageParser<RoomListItem>(() => new RoomListItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomListItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListItem(RoomListItem other) : this() {
      id_ = other.id_;
      roomType_ = other.roomType_;
      idCircuit_ = other.idCircuit_;
      maxPlayers_ = other.maxPlayers_;
      nbPlayers_ = other.nbPlayers_;
      players_ = other.players_.Clone();
      startingPositions_ = other.startingPositions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListItem Clone() {
      return new RoomListItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 2;
    private int roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "id_circuit" field.</summary>
    public const int IdCircuitFieldNumber = 3;
    private int idCircuit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdCircuit {
      get { return idCircuit_; }
      set {
        idCircuit_ = value;
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 4;
    private int maxPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "nb_players" field.</summary>
    public const int NbPlayersFieldNumber = 5;
    private int nbPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NbPlayers {
      get { return nbPlayers_; }
      set {
        nbPlayers_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Protocol.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(50, global::Protocol.Player.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Player> players_ = new pbc::RepeatedField<global::Protocol.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "starting_positions" field.</summary>
    public const int StartingPositionsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_startingPositions_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> startingPositions_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StartingPositions {
      get { return startingPositions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomListItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomListItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (RoomType != other.RoomType) return false;
      if (IdCircuit != other.IdCircuit) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      if (NbPlayers != other.NbPlayers) return false;
      if(!players_.Equals(other.players_)) return false;
      if(!startingPositions_.Equals(other.startingPositions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      if (IdCircuit != 0) hash ^= IdCircuit.GetHashCode();
      if (MaxPlayers != 0) hash ^= MaxPlayers.GetHashCode();
      if (NbPlayers != 0) hash ^= NbPlayers.GetHashCode();
      hash ^= players_.GetHashCode();
      hash ^= startingPositions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (RoomType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomType);
      }
      if (IdCircuit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IdCircuit);
      }
      if (MaxPlayers != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxPlayers);
      }
      if (NbPlayers != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NbPlayers);
      }
      players_.WriteTo(output, _repeated_players_codec);
      startingPositions_.WriteTo(output, _repeated_startingPositions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      if (IdCircuit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdCircuit);
      }
      if (MaxPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayers);
      }
      if (NbPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NbPlayers);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      size += startingPositions_.CalculateSize(_repeated_startingPositions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomListItem other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      if (other.IdCircuit != 0) {
        IdCircuit = other.IdCircuit;
      }
      if (other.MaxPlayers != 0) {
        MaxPlayers = other.MaxPlayers;
      }
      if (other.NbPlayers != 0) {
        NbPlayers = other.NbPlayers;
      }
      players_.Add(other.players_);
      startingPositions_.Add(other.startingPositions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            RoomType = input.ReadInt32();
            break;
          }
          case 24: {
            IdCircuit = input.ReadInt32();
            break;
          }
          case 32: {
            MaxPlayers = input.ReadInt32();
            break;
          }
          case 40: {
            NbPlayers = input.ReadInt32();
            break;
          }
          case 50: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 58:
          case 56: {
            startingPositions_.AddEntriesFrom(input, _repeated_startingPositions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      username_ = other.username_;
      nbRaces_ = other.nbRaces_;
      nbWins_ = other.nbWins_;
      record_ = other.record_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nb_races" field.</summary>
    public const int NbRacesFieldNumber = 2;
    private int nbRaces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NbRaces {
      get { return nbRaces_; }
      set {
        nbRaces_ = value;
      }
    }

    /// <summary>Field number for the "nb_wins" field.</summary>
    public const int NbWinsFieldNumber = 3;
    private int nbWins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NbWins {
      get { return nbWins_; }
      set {
        nbWins_ = value;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 4;
    private string record_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Record {
      get { return record_; }
      set {
        record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (NbRaces != other.NbRaces) return false;
      if (NbWins != other.NbWins) return false;
      if (Record != other.Record) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (NbRaces != 0) hash ^= NbRaces.GetHashCode();
      if (NbWins != 0) hash ^= NbWins.GetHashCode();
      if (Record.Length != 0) hash ^= Record.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (NbRaces != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NbRaces);
      }
      if (NbWins != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NbWins);
      }
      if (Record.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Record);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (NbRaces != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NbRaces);
      }
      if (NbWins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NbWins);
      }
      if (Record.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.NbRaces != 0) {
        NbRaces = other.NbRaces;
      }
      if (other.NbWins != 0) {
        NbWins = other.NbWins;
      }
      if (other.Record.Length != 0) {
        Record = other.Record;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 16: {
            NbRaces = input.ReadInt32();
            break;
          }
          case 24: {
            NbWins = input.ReadInt32();
            break;
          }
          case 34: {
            Record = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  starts a game
  /// </summary>
  public sealed partial class StartRoom : pb::IMessage<StartRoom> {
    private static readonly pb::MessageParser<StartRoom> _parser = new pb::MessageParser<StartRoom>(() => new StartRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRoom(StartRoom other) : this() {
      success_ = other.success_;
      Room = other.room_ != null ? other.Room.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRoom Clone() {
      return new StartRoom(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    private global::Protocol.RoomListItem room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RoomListItem Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(Room, other.Room)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (room_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartRoom other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.room_ != null) {
        if (room_ == null) {
          room_ = new global::Protocol.RoomListItem();
        }
        Room.MergeFrom(other.Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (room_ == null) {
              room_ = new global::Protocol.RoomListItem();
            }
            input.ReadMessage(room_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  join a room
  /// </summary>
  public sealed partial class JoinRoomRequest : pb::IMessage<JoinRoomRequest> {
    private static readonly pb::MessageParser<JoinRoomRequest> _parser = new pb::MessageParser<JoinRoomRequest>(() => new JoinRoomRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRequest(JoinRoomRequest other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRequest Clone() {
      return new JoinRoomRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinRoomResponse : pb::IMessage<JoinRoomResponse> {
    private static readonly pb::MessageParser<JoinRoomResponse> _parser = new pb::MessageParser<JoinRoomResponse>(() => new JoinRoomResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomResponse(JoinRoomResponse other) : this() {
      success_ = other.success_;
      Room = other.room_ != null ? other.Room.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomResponse Clone() {
      return new JoinRoomResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    private global::Protocol.RoomListItem room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RoomListItem Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(Room, other.Room)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (room_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.room_ != null) {
        if (room_ == null) {
          room_ = new global::Protocol.RoomListItem();
        }
        Room.MergeFrom(other.Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (room_ == null) {
              room_ = new global::Protocol.RoomListItem();
            }
            input.ReadMessage(room_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartingPosition : pb::IMessage<StartingPosition> {
    private static readonly pb::MessageParser<StartingPosition> _parser = new pb::MessageParser<StartingPosition>(() => new StartingPosition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartingPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartingPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartingPosition(StartingPosition other) : this() {
      position_ = other.position_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartingPosition Clone() {
      return new StartingPosition(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_position_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> position_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Position {
      get { return position_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartingPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartingPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!position_.Equals(other.position_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= position_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      position_.WriteTo(output, _repeated_position_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += position_.CalculateSize(_repeated_position_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartingPosition other) {
      if (other == null) {
        return;
      }
      position_.Add(other.position_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            position_.AddEntriesFrom(input, _repeated_position_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterRequest : pb::IMessage<RegisterRequest> {
    private static readonly pb::MessageParser<RegisterRequest> _parser = new pb::MessageParser<RegisterRequest>(() => new RegisterRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest(RegisterRequest other) : this() {
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest Clone() {
      return new RegisterRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterResponse : pb::IMessage<RegisterResponse> {
    private static readonly pb::MessageParser<RegisterResponse> _parser = new pb::MessageParser<RegisterResponse>(() => new RegisterResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse(RegisterResponse other) : this() {
      success_ = other.success_;
      username_ = other.username_;
      UserStats = other.userStats_ != null ? other.UserStats.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse Clone() {
      return new RegisterResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_stats" field.</summary>
    public const int UserStatsFieldNumber = 3;
    private global::Protocol.UserStats userStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.UserStats UserStats {
      get { return userStats_; }
      set {
        userStats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Username != other.Username) return false;
      if (!object.Equals(UserStats, other.UserStats)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (userStats_ != null) hash ^= UserStats.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (userStats_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserStats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (userStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserStats);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.userStats_ != null) {
        if (userStats_ == null) {
          userStats_ = new global::Protocol.UserStats();
        }
        UserStats.MergeFrom(other.UserStats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            if (userStats_ == null) {
              userStats_ = new global::Protocol.UserStats();
            }
            input.ReadMessage(userStats_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      success_ = other.success_;
      username_ = other.username_;
      UserStats = other.userStats_ != null ? other.UserStats.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_stats" field.</summary>
    public const int UserStatsFieldNumber = 3;
    private global::Protocol.UserStats userStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.UserStats UserStats {
      get { return userStats_; }
      set {
        userStats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Username != other.Username) return false;
      if (!object.Equals(UserStats, other.UserStats)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (userStats_ != null) hash ^= UserStats.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (userStats_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserStats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (userStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserStats);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.userStats_ != null) {
        if (userStats_ == null) {
          userStats_ = new global::Protocol.UserStats();
        }
        UserStats.MergeFrom(other.UserStats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            if (userStats_ == null) {
              userStats_ = new global::Protocol.UserStats();
            }
            input.ReadMessage(userStats_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeUsername : pb::IMessage<ChangeUsername> {
    private static readonly pb::MessageParser<ChangeUsername> _parser = new pb::MessageParser<ChangeUsername>(() => new ChangeUsername());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeUsername> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeUsername() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeUsername(ChangeUsername other) : this() {
      username_ = other.username_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeUsername Clone() {
      return new ChangeUsername(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeUsername);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeUsername other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeUsername other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserStats : pb::IMessage<UserStats> {
    private static readonly pb::MessageParser<UserStats> _parser = new pb::MessageParser<UserStats>(() => new UserStats());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStats(UserStats other) : this() {
      username_ = other.username_;
      race_ = other.race_;
      victory_ = other.victory_;
      recordt1_ = other.recordt1_;
      recordt2_ = other.recordt2_;
      recordt3_ = other.recordt3_;
      car1Red_ = other.car1Red_;
      car1Green_ = other.car1Green_;
      car1Blue_ = other.car1Blue_;
      car2Red_ = other.car2Red_;
      car2Green_ = other.car2Green_;
      car2Blue_ = other.car2Blue_;
      car3Red_ = other.car3Red_;
      car3Green_ = other.car3Green_;
      car3Blue_ = other.car3Blue_;
      car4Red_ = other.car4Red_;
      car4Green_ = other.car4Green_;
      car4Blue_ = other.car4Blue_;
      car1Slider_ = other.car1Slider_;
      car1RedTR_ = other.car1RedTR_;
      car1GreenTR_ = other.car1GreenTR_;
      car1BlueTR_ = other.car1BlueTR_;
      car1CursorX_ = other.car1CursorX_;
      car1CursorY_ = other.car1CursorY_;
      car2Slider_ = other.car2Slider_;
      car2RedTR_ = other.car2RedTR_;
      car2GreenTR_ = other.car2GreenTR_;
      car2BlueTR_ = other.car2BlueTR_;
      car2CursorX_ = other.car2CursorX_;
      car2CursorY_ = other.car2CursorY_;
      car3Slider_ = other.car3Slider_;
      car3RedTR_ = other.car3RedTR_;
      car3GreenTR_ = other.car3GreenTR_;
      car3BlueTR_ = other.car3BlueTR_;
      car3CursorX_ = other.car3CursorX_;
      car3CursorY_ = other.car3CursorY_;
      car4Slider_ = other.car4Slider_;
      car4RedTR_ = other.car4RedTR_;
      car4GreenTR_ = other.car4GreenTR_;
      car4BlueTR_ = other.car4BlueTR_;
      car4CursorX_ = other.car4CursorX_;
      car4CursorY_ = other.car4CursorY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStats Clone() {
      return new UserStats(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 2;
    private int race_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "victory" field.</summary>
    public const int VictoryFieldNumber = 3;
    private int victory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Victory {
      get { return victory_; }
      set {
        victory_ = value;
      }
    }

    /// <summary>Field number for the "recordt1" field.</summary>
    public const int Recordt1FieldNumber = 4;
    private string recordt1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Recordt1 {
      get { return recordt1_; }
      set {
        recordt1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recordt2" field.</summary>
    public const int Recordt2FieldNumber = 5;
    private string recordt2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Recordt2 {
      get { return recordt2_; }
      set {
        recordt2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recordt3" field.</summary>
    public const int Recordt3FieldNumber = 6;
    private string recordt3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Recordt3 {
      get { return recordt3_; }
      set {
        recordt3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "car1red" field.</summary>
    public const int Car1RedFieldNumber = 7;
    private int car1Red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car1Red {
      get { return car1Red_; }
      set {
        car1Red_ = value;
      }
    }

    /// <summary>Field number for the "car1green" field.</summary>
    public const int Car1GreenFieldNumber = 8;
    private int car1Green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car1Green {
      get { return car1Green_; }
      set {
        car1Green_ = value;
      }
    }

    /// <summary>Field number for the "car1blue" field.</summary>
    public const int Car1BlueFieldNumber = 9;
    private int car1Blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car1Blue {
      get { return car1Blue_; }
      set {
        car1Blue_ = value;
      }
    }

    /// <summary>Field number for the "car2red" field.</summary>
    public const int Car2RedFieldNumber = 10;
    private int car2Red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car2Red {
      get { return car2Red_; }
      set {
        car2Red_ = value;
      }
    }

    /// <summary>Field number for the "car2green" field.</summary>
    public const int Car2GreenFieldNumber = 11;
    private int car2Green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car2Green {
      get { return car2Green_; }
      set {
        car2Green_ = value;
      }
    }

    /// <summary>Field number for the "car2blue" field.</summary>
    public const int Car2BlueFieldNumber = 12;
    private int car2Blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car2Blue {
      get { return car2Blue_; }
      set {
        car2Blue_ = value;
      }
    }

    /// <summary>Field number for the "car3red" field.</summary>
    public const int Car3RedFieldNumber = 13;
    private int car3Red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car3Red {
      get { return car3Red_; }
      set {
        car3Red_ = value;
      }
    }

    /// <summary>Field number for the "car3green" field.</summary>
    public const int Car3GreenFieldNumber = 14;
    private int car3Green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car3Green {
      get { return car3Green_; }
      set {
        car3Green_ = value;
      }
    }

    /// <summary>Field number for the "car3blue" field.</summary>
    public const int Car3BlueFieldNumber = 15;
    private int car3Blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car3Blue {
      get { return car3Blue_; }
      set {
        car3Blue_ = value;
      }
    }

    /// <summary>Field number for the "car4red" field.</summary>
    public const int Car4RedFieldNumber = 16;
    private int car4Red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car4Red {
      get { return car4Red_; }
      set {
        car4Red_ = value;
      }
    }

    /// <summary>Field number for the "car4green" field.</summary>
    public const int Car4GreenFieldNumber = 17;
    private int car4Green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car4Green {
      get { return car4Green_; }
      set {
        car4Green_ = value;
      }
    }

    /// <summary>Field number for the "car4blue" field.</summary>
    public const int Car4BlueFieldNumber = 18;
    private int car4Blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car4Blue {
      get { return car4Blue_; }
      set {
        car4Blue_ = value;
      }
    }

    /// <summary>Field number for the "car1slider" field.</summary>
    public const int Car1SliderFieldNumber = 19;
    private float car1Slider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Car1Slider {
      get { return car1Slider_; }
      set {
        car1Slider_ = value;
      }
    }

    /// <summary>Field number for the "car1redTR" field.</summary>
    public const int Car1RedTRFieldNumber = 20;
    private int car1RedTR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car1RedTR {
      get { return car1RedTR_; }
      set {
        car1RedTR_ = value;
      }
    }

    /// <summary>Field number for the "car1greenTR" field.</summary>
    public const int Car1GreenTRFieldNumber = 21;
    private int car1GreenTR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car1GreenTR {
      get { return car1GreenTR_; }
      set {
        car1GreenTR_ = value;
      }
    }

    /// <summary>Field number for the "car1blueTR" field.</summary>
    public const int Car1BlueTRFieldNumber = 22;
    private int car1BlueTR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car1BlueTR {
      get { return car1BlueTR_; }
      set {
        car1BlueTR_ = value;
      }
    }

    /// <summary>Field number for the "car1cursorX" field.</summary>
    public const int Car1CursorXFieldNumber = 23;
    private float car1CursorX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Car1CursorX {
      get { return car1CursorX_; }
      set {
        car1CursorX_ = value;
      }
    }

    /// <summary>Field number for the "car1cursorY" field.</summary>
    public const int Car1CursorYFieldNumber = 24;
    private float car1CursorY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Car1CursorY {
      get { return car1CursorY_; }
      set {
        car1CursorY_ = value;
      }
    }

    /// <summary>Field number for the "car2slider" field.</summary>
    public const int Car2SliderFieldNumber = 25;
    private float car2Slider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Car2Slider {
      get { return car2Slider_; }
      set {
        car2Slider_ = value;
      }
    }

    /// <summary>Field number for the "car2redTR" field.</summary>
    public const int Car2RedTRFieldNumber = 26;
    private int car2RedTR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car2RedTR {
      get { return car2RedTR_; }
      set {
        car2RedTR_ = value;
      }
    }

    /// <summary>Field number for the "car2greenTR" field.</summary>
    public const int Car2GreenTRFieldNumber = 27;
    private int car2GreenTR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car2GreenTR {
      get { return car2GreenTR_; }
      set {
        car2GreenTR_ = value;
      }
    }

    /// <summary>Field number for the "car2blueTR" field.</summary>
    public const int Car2BlueTRFieldNumber = 28;
    private int car2BlueTR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car2BlueTR {
      get { return car2BlueTR_; }
      set {
        car2BlueTR_ = value;
      }
    }

    /// <summary>Field number for the "car2cursorX" field.</summary>
    public const int Car2CursorXFieldNumber = 29;
    private float car2CursorX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Car2CursorX {
      get { return car2CursorX_; }
      set {
        car2CursorX_ = value;
      }
    }

    /// <summary>Field number for the "car2cursorY" field.</summary>
    public const int Car2CursorYFieldNumber = 30;
    private float car2CursorY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Car2CursorY {
      get { return car2CursorY_; }
      set {
        car2CursorY_ = value;
      }
    }

    /// <summary>Field number for the "car3slider" field.</summary>
    public const int Car3SliderFieldNumber = 31;
    private float car3Slider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Car3Slider {
      get { return car3Slider_; }
      set {
        car3Slider_ = value;
      }
    }

    /// <summary>Field number for the "car3redTR" field.</summary>
    public const int Car3RedTRFieldNumber = 32;
    private int car3RedTR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car3RedTR {
      get { return car3RedTR_; }
      set {
        car3RedTR_ = value;
      }
    }

    /// <summary>Field number for the "car3greenTR" field.</summary>
    public const int Car3GreenTRFieldNumber = 33;
    private int car3GreenTR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car3GreenTR {
      get { return car3GreenTR_; }
      set {
        car3GreenTR_ = value;
      }
    }

    /// <summary>Field number for the "car3blueTR" field.</summary>
    public const int Car3BlueTRFieldNumber = 34;
    private int car3BlueTR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car3BlueTR {
      get { return car3BlueTR_; }
      set {
        car3BlueTR_ = value;
      }
    }

    /// <summary>Field number for the "car3cursorX" field.</summary>
    public const int Car3CursorXFieldNumber = 35;
    private float car3CursorX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Car3CursorX {
      get { return car3CursorX_; }
      set {
        car3CursorX_ = value;
      }
    }

    /// <summary>Field number for the "car3cursorY" field.</summary>
    public const int Car3CursorYFieldNumber = 36;
    private float car3CursorY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Car3CursorY {
      get { return car3CursorY_; }
      set {
        car3CursorY_ = value;
      }
    }

    /// <summary>Field number for the "car4slider" field.</summary>
    public const int Car4SliderFieldNumber = 37;
    private float car4Slider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Car4Slider {
      get { return car4Slider_; }
      set {
        car4Slider_ = value;
      }
    }

    /// <summary>Field number for the "car4redTR" field.</summary>
    public const int Car4RedTRFieldNumber = 38;
    private int car4RedTR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car4RedTR {
      get { return car4RedTR_; }
      set {
        car4RedTR_ = value;
      }
    }

    /// <summary>Field number for the "car4greenTR" field.</summary>
    public const int Car4GreenTRFieldNumber = 39;
    private int car4GreenTR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car4GreenTR {
      get { return car4GreenTR_; }
      set {
        car4GreenTR_ = value;
      }
    }

    /// <summary>Field number for the "car4blueTR" field.</summary>
    public const int Car4BlueTRFieldNumber = 40;
    private int car4BlueTR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Car4BlueTR {
      get { return car4BlueTR_; }
      set {
        car4BlueTR_ = value;
      }
    }

    /// <summary>Field number for the "car4cursorX" field.</summary>
    public const int Car4CursorXFieldNumber = 41;
    private float car4CursorX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Car4CursorX {
      get { return car4CursorX_; }
      set {
        car4CursorX_ = value;
      }
    }

    /// <summary>Field number for the "car4cursorY" field.</summary>
    public const int Car4CursorYFieldNumber = 42;
    private float car4CursorY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Car4CursorY {
      get { return car4CursorY_; }
      set {
        car4CursorY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Race != other.Race) return false;
      if (Victory != other.Victory) return false;
      if (Recordt1 != other.Recordt1) return false;
      if (Recordt2 != other.Recordt2) return false;
      if (Recordt3 != other.Recordt3) return false;
      if (Car1Red != other.Car1Red) return false;
      if (Car1Green != other.Car1Green) return false;
      if (Car1Blue != other.Car1Blue) return false;
      if (Car2Red != other.Car2Red) return false;
      if (Car2Green != other.Car2Green) return false;
      if (Car2Blue != other.Car2Blue) return false;
      if (Car3Red != other.Car3Red) return false;
      if (Car3Green != other.Car3Green) return false;
      if (Car3Blue != other.Car3Blue) return false;
      if (Car4Red != other.Car4Red) return false;
      if (Car4Green != other.Car4Green) return false;
      if (Car4Blue != other.Car4Blue) return false;
      if (Car1Slider != other.Car1Slider) return false;
      if (Car1RedTR != other.Car1RedTR) return false;
      if (Car1GreenTR != other.Car1GreenTR) return false;
      if (Car1BlueTR != other.Car1BlueTR) return false;
      if (Car1CursorX != other.Car1CursorX) return false;
      if (Car1CursorY != other.Car1CursorY) return false;
      if (Car2Slider != other.Car2Slider) return false;
      if (Car2RedTR != other.Car2RedTR) return false;
      if (Car2GreenTR != other.Car2GreenTR) return false;
      if (Car2BlueTR != other.Car2BlueTR) return false;
      if (Car2CursorX != other.Car2CursorX) return false;
      if (Car2CursorY != other.Car2CursorY) return false;
      if (Car3Slider != other.Car3Slider) return false;
      if (Car3RedTR != other.Car3RedTR) return false;
      if (Car3GreenTR != other.Car3GreenTR) return false;
      if (Car3BlueTR != other.Car3BlueTR) return false;
      if (Car3CursorX != other.Car3CursorX) return false;
      if (Car3CursorY != other.Car3CursorY) return false;
      if (Car4Slider != other.Car4Slider) return false;
      if (Car4RedTR != other.Car4RedTR) return false;
      if (Car4GreenTR != other.Car4GreenTR) return false;
      if (Car4BlueTR != other.Car4BlueTR) return false;
      if (Car4CursorX != other.Car4CursorX) return false;
      if (Car4CursorY != other.Car4CursorY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Race != 0) hash ^= Race.GetHashCode();
      if (Victory != 0) hash ^= Victory.GetHashCode();
      if (Recordt1.Length != 0) hash ^= Recordt1.GetHashCode();
      if (Recordt2.Length != 0) hash ^= Recordt2.GetHashCode();
      if (Recordt3.Length != 0) hash ^= Recordt3.GetHashCode();
      if (Car1Red != 0) hash ^= Car1Red.GetHashCode();
      if (Car1Green != 0) hash ^= Car1Green.GetHashCode();
      if (Car1Blue != 0) hash ^= Car1Blue.GetHashCode();
      if (Car2Red != 0) hash ^= Car2Red.GetHashCode();
      if (Car2Green != 0) hash ^= Car2Green.GetHashCode();
      if (Car2Blue != 0) hash ^= Car2Blue.GetHashCode();
      if (Car3Red != 0) hash ^= Car3Red.GetHashCode();
      if (Car3Green != 0) hash ^= Car3Green.GetHashCode();
      if (Car3Blue != 0) hash ^= Car3Blue.GetHashCode();
      if (Car4Red != 0) hash ^= Car4Red.GetHashCode();
      if (Car4Green != 0) hash ^= Car4Green.GetHashCode();
      if (Car4Blue != 0) hash ^= Car4Blue.GetHashCode();
      if (Car1Slider != 0F) hash ^= Car1Slider.GetHashCode();
      if (Car1RedTR != 0) hash ^= Car1RedTR.GetHashCode();
      if (Car1GreenTR != 0) hash ^= Car1GreenTR.GetHashCode();
      if (Car1BlueTR != 0) hash ^= Car1BlueTR.GetHashCode();
      if (Car1CursorX != 0F) hash ^= Car1CursorX.GetHashCode();
      if (Car1CursorY != 0F) hash ^= Car1CursorY.GetHashCode();
      if (Car2Slider != 0F) hash ^= Car2Slider.GetHashCode();
      if (Car2RedTR != 0) hash ^= Car2RedTR.GetHashCode();
      if (Car2GreenTR != 0) hash ^= Car2GreenTR.GetHashCode();
      if (Car2BlueTR != 0) hash ^= Car2BlueTR.GetHashCode();
      if (Car2CursorX != 0F) hash ^= Car2CursorX.GetHashCode();
      if (Car2CursorY != 0F) hash ^= Car2CursorY.GetHashCode();
      if (Car3Slider != 0F) hash ^= Car3Slider.GetHashCode();
      if (Car3RedTR != 0) hash ^= Car3RedTR.GetHashCode();
      if (Car3GreenTR != 0) hash ^= Car3GreenTR.GetHashCode();
      if (Car3BlueTR != 0) hash ^= Car3BlueTR.GetHashCode();
      if (Car3CursorX != 0F) hash ^= Car3CursorX.GetHashCode();
      if (Car3CursorY != 0F) hash ^= Car3CursorY.GetHashCode();
      if (Car4Slider != 0F) hash ^= Car4Slider.GetHashCode();
      if (Car4RedTR != 0) hash ^= Car4RedTR.GetHashCode();
      if (Car4GreenTR != 0) hash ^= Car4GreenTR.GetHashCode();
      if (Car4BlueTR != 0) hash ^= Car4BlueTR.GetHashCode();
      if (Car4CursorX != 0F) hash ^= Car4CursorX.GetHashCode();
      if (Car4CursorY != 0F) hash ^= Car4CursorY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Race != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Race);
      }
      if (Victory != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Victory);
      }
      if (Recordt1.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Recordt1);
      }
      if (Recordt2.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Recordt2);
      }
      if (Recordt3.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Recordt3);
      }
      if (Car1Red != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Car1Red);
      }
      if (Car1Green != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Car1Green);
      }
      if (Car1Blue != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Car1Blue);
      }
      if (Car2Red != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Car2Red);
      }
      if (Car2Green != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Car2Green);
      }
      if (Car2Blue != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Car2Blue);
      }
      if (Car3Red != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Car3Red);
      }
      if (Car3Green != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Car3Green);
      }
      if (Car3Blue != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Car3Blue);
      }
      if (Car4Red != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Car4Red);
      }
      if (Car4Green != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Car4Green);
      }
      if (Car4Blue != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Car4Blue);
      }
      if (Car1Slider != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(Car1Slider);
      }
      if (Car1RedTR != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Car1RedTR);
      }
      if (Car1GreenTR != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Car1GreenTR);
      }
      if (Car1BlueTR != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Car1BlueTR);
      }
      if (Car1CursorX != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(Car1CursorX);
      }
      if (Car1CursorY != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(Car1CursorY);
      }
      if (Car2Slider != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(Car2Slider);
      }
      if (Car2RedTR != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Car2RedTR);
      }
      if (Car2GreenTR != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(Car2GreenTR);
      }
      if (Car2BlueTR != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(Car2BlueTR);
      }
      if (Car2CursorX != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(Car2CursorX);
      }
      if (Car2CursorY != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(Car2CursorY);
      }
      if (Car3Slider != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(Car3Slider);
      }
      if (Car3RedTR != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(Car3RedTR);
      }
      if (Car3GreenTR != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(Car3GreenTR);
      }
      if (Car3BlueTR != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Car3BlueTR);
      }
      if (Car3CursorX != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(Car3CursorX);
      }
      if (Car3CursorY != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(Car3CursorY);
      }
      if (Car4Slider != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(Car4Slider);
      }
      if (Car4RedTR != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(Car4RedTR);
      }
      if (Car4GreenTR != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(Car4GreenTR);
      }
      if (Car4BlueTR != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(Car4BlueTR);
      }
      if (Car4CursorX != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(Car4CursorX);
      }
      if (Car4CursorY != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(Car4CursorY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Race);
      }
      if (Victory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Victory);
      }
      if (Recordt1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Recordt1);
      }
      if (Recordt2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Recordt2);
      }
      if (Recordt3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Recordt3);
      }
      if (Car1Red != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Car1Red);
      }
      if (Car1Green != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Car1Green);
      }
      if (Car1Blue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Car1Blue);
      }
      if (Car2Red != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Car2Red);
      }
      if (Car2Green != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Car2Green);
      }
      if (Car2Blue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Car2Blue);
      }
      if (Car3Red != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Car3Red);
      }
      if (Car3Green != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Car3Green);
      }
      if (Car3Blue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Car3Blue);
      }
      if (Car4Red != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car4Red);
      }
      if (Car4Green != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car4Green);
      }
      if (Car4Blue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car4Blue);
      }
      if (Car1Slider != 0F) {
        size += 2 + 4;
      }
      if (Car1RedTR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car1RedTR);
      }
      if (Car1GreenTR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car1GreenTR);
      }
      if (Car1BlueTR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car1BlueTR);
      }
      if (Car1CursorX != 0F) {
        size += 2 + 4;
      }
      if (Car1CursorY != 0F) {
        size += 2 + 4;
      }
      if (Car2Slider != 0F) {
        size += 2 + 4;
      }
      if (Car2RedTR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car2RedTR);
      }
      if (Car2GreenTR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car2GreenTR);
      }
      if (Car2BlueTR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car2BlueTR);
      }
      if (Car2CursorX != 0F) {
        size += 2 + 4;
      }
      if (Car2CursorY != 0F) {
        size += 2 + 4;
      }
      if (Car3Slider != 0F) {
        size += 2 + 4;
      }
      if (Car3RedTR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car3RedTR);
      }
      if (Car3GreenTR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car3GreenTR);
      }
      if (Car3BlueTR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car3BlueTR);
      }
      if (Car3CursorX != 0F) {
        size += 2 + 4;
      }
      if (Car3CursorY != 0F) {
        size += 2 + 4;
      }
      if (Car4Slider != 0F) {
        size += 2 + 4;
      }
      if (Car4RedTR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car4RedTR);
      }
      if (Car4GreenTR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car4GreenTR);
      }
      if (Car4BlueTR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Car4BlueTR);
      }
      if (Car4CursorX != 0F) {
        size += 2 + 4;
      }
      if (Car4CursorY != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserStats other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Race != 0) {
        Race = other.Race;
      }
      if (other.Victory != 0) {
        Victory = other.Victory;
      }
      if (other.Recordt1.Length != 0) {
        Recordt1 = other.Recordt1;
      }
      if (other.Recordt2.Length != 0) {
        Recordt2 = other.Recordt2;
      }
      if (other.Recordt3.Length != 0) {
        Recordt3 = other.Recordt3;
      }
      if (other.Car1Red != 0) {
        Car1Red = other.Car1Red;
      }
      if (other.Car1Green != 0) {
        Car1Green = other.Car1Green;
      }
      if (other.Car1Blue != 0) {
        Car1Blue = other.Car1Blue;
      }
      if (other.Car2Red != 0) {
        Car2Red = other.Car2Red;
      }
      if (other.Car2Green != 0) {
        Car2Green = other.Car2Green;
      }
      if (other.Car2Blue != 0) {
        Car2Blue = other.Car2Blue;
      }
      if (other.Car3Red != 0) {
        Car3Red = other.Car3Red;
      }
      if (other.Car3Green != 0) {
        Car3Green = other.Car3Green;
      }
      if (other.Car3Blue != 0) {
        Car3Blue = other.Car3Blue;
      }
      if (other.Car4Red != 0) {
        Car4Red = other.Car4Red;
      }
      if (other.Car4Green != 0) {
        Car4Green = other.Car4Green;
      }
      if (other.Car4Blue != 0) {
        Car4Blue = other.Car4Blue;
      }
      if (other.Car1Slider != 0F) {
        Car1Slider = other.Car1Slider;
      }
      if (other.Car1RedTR != 0) {
        Car1RedTR = other.Car1RedTR;
      }
      if (other.Car1GreenTR != 0) {
        Car1GreenTR = other.Car1GreenTR;
      }
      if (other.Car1BlueTR != 0) {
        Car1BlueTR = other.Car1BlueTR;
      }
      if (other.Car1CursorX != 0F) {
        Car1CursorX = other.Car1CursorX;
      }
      if (other.Car1CursorY != 0F) {
        Car1CursorY = other.Car1CursorY;
      }
      if (other.Car2Slider != 0F) {
        Car2Slider = other.Car2Slider;
      }
      if (other.Car2RedTR != 0) {
        Car2RedTR = other.Car2RedTR;
      }
      if (other.Car2GreenTR != 0) {
        Car2GreenTR = other.Car2GreenTR;
      }
      if (other.Car2BlueTR != 0) {
        Car2BlueTR = other.Car2BlueTR;
      }
      if (other.Car2CursorX != 0F) {
        Car2CursorX = other.Car2CursorX;
      }
      if (other.Car2CursorY != 0F) {
        Car2CursorY = other.Car2CursorY;
      }
      if (other.Car3Slider != 0F) {
        Car3Slider = other.Car3Slider;
      }
      if (other.Car3RedTR != 0) {
        Car3RedTR = other.Car3RedTR;
      }
      if (other.Car3GreenTR != 0) {
        Car3GreenTR = other.Car3GreenTR;
      }
      if (other.Car3BlueTR != 0) {
        Car3BlueTR = other.Car3BlueTR;
      }
      if (other.Car3CursorX != 0F) {
        Car3CursorX = other.Car3CursorX;
      }
      if (other.Car3CursorY != 0F) {
        Car3CursorY = other.Car3CursorY;
      }
      if (other.Car4Slider != 0F) {
        Car4Slider = other.Car4Slider;
      }
      if (other.Car4RedTR != 0) {
        Car4RedTR = other.Car4RedTR;
      }
      if (other.Car4GreenTR != 0) {
        Car4GreenTR = other.Car4GreenTR;
      }
      if (other.Car4BlueTR != 0) {
        Car4BlueTR = other.Car4BlueTR;
      }
      if (other.Car4CursorX != 0F) {
        Car4CursorX = other.Car4CursorX;
      }
      if (other.Car4CursorY != 0F) {
        Car4CursorY = other.Car4CursorY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 16: {
            Race = input.ReadInt32();
            break;
          }
          case 24: {
            Victory = input.ReadInt32();
            break;
          }
          case 34: {
            Recordt1 = input.ReadString();
            break;
          }
          case 42: {
            Recordt2 = input.ReadString();
            break;
          }
          case 50: {
            Recordt3 = input.ReadString();
            break;
          }
          case 56: {
            Car1Red = input.ReadInt32();
            break;
          }
          case 64: {
            Car1Green = input.ReadInt32();
            break;
          }
          case 72: {
            Car1Blue = input.ReadInt32();
            break;
          }
          case 80: {
            Car2Red = input.ReadInt32();
            break;
          }
          case 88: {
            Car2Green = input.ReadInt32();
            break;
          }
          case 96: {
            Car2Blue = input.ReadInt32();
            break;
          }
          case 104: {
            Car3Red = input.ReadInt32();
            break;
          }
          case 112: {
            Car3Green = input.ReadInt32();
            break;
          }
          case 120: {
            Car3Blue = input.ReadInt32();
            break;
          }
          case 128: {
            Car4Red = input.ReadInt32();
            break;
          }
          case 136: {
            Car4Green = input.ReadInt32();
            break;
          }
          case 144: {
            Car4Blue = input.ReadInt32();
            break;
          }
          case 157: {
            Car1Slider = input.ReadFloat();
            break;
          }
          case 160: {
            Car1RedTR = input.ReadInt32();
            break;
          }
          case 168: {
            Car1GreenTR = input.ReadInt32();
            break;
          }
          case 176: {
            Car1BlueTR = input.ReadInt32();
            break;
          }
          case 189: {
            Car1CursorX = input.ReadFloat();
            break;
          }
          case 197: {
            Car1CursorY = input.ReadFloat();
            break;
          }
          case 205: {
            Car2Slider = input.ReadFloat();
            break;
          }
          case 208: {
            Car2RedTR = input.ReadInt32();
            break;
          }
          case 216: {
            Car2GreenTR = input.ReadInt32();
            break;
          }
          case 224: {
            Car2BlueTR = input.ReadInt32();
            break;
          }
          case 237: {
            Car2CursorX = input.ReadFloat();
            break;
          }
          case 245: {
            Car2CursorY = input.ReadFloat();
            break;
          }
          case 253: {
            Car3Slider = input.ReadFloat();
            break;
          }
          case 256: {
            Car3RedTR = input.ReadInt32();
            break;
          }
          case 264: {
            Car3GreenTR = input.ReadInt32();
            break;
          }
          case 272: {
            Car3BlueTR = input.ReadInt32();
            break;
          }
          case 285: {
            Car3CursorX = input.ReadFloat();
            break;
          }
          case 293: {
            Car3CursorY = input.ReadFloat();
            break;
          }
          case 301: {
            Car4Slider = input.ReadFloat();
            break;
          }
          case 304: {
            Car4RedTR = input.ReadInt32();
            break;
          }
          case 312: {
            Car4GreenTR = input.ReadInt32();
            break;
          }
          case 320: {
            Car4BlueTR = input.ReadInt32();
            break;
          }
          case 333: {
            Car4CursorX = input.ReadFloat();
            break;
          }
          case 341: {
            Car4CursorY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  permettra d'insérer les valeurs en BDD
  /// </summary>
  public sealed partial class SetUserStats : pb::IMessage<SetUserStats> {
    private static readonly pb::MessageParser<SetUserStats> _parser = new pb::MessageParser<SetUserStats>(() => new SetUserStats());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetUserStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserStats(SetUserStats other) : this() {
      UserStats = other.userStats_ != null ? other.UserStats.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserStats Clone() {
      return new SetUserStats(this);
    }

    /// <summary>Field number for the "user_stats" field.</summary>
    public const int UserStatsFieldNumber = 1;
    private global::Protocol.UserStats userStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.UserStats UserStats {
      get { return userStats_; }
      set {
        userStats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetUserStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetUserStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserStats, other.UserStats)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userStats_ != null) hash ^= UserStats.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userStats_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserStats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserStats);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetUserStats other) {
      if (other == null) {
        return;
      }
      if (other.userStats_ != null) {
        if (userStats_ == null) {
          userStats_ = new global::Protocol.UserStats();
        }
        UserStats.MergeFrom(other.UserStats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userStats_ == null) {
              userStats_ = new global::Protocol.UserStats();
            }
            input.ReadMessage(userStats_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  permettra de retrouner les valeurs en BDD
  /// </summary>
  public sealed partial class UserStatsResponse : pb::IMessage<UserStatsResponse> {
    private static readonly pb::MessageParser<UserStatsResponse> _parser = new pb::MessageParser<UserStatsResponse>(() => new UserStatsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserStatsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStatsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStatsResponse(UserStatsResponse other) : this() {
      UserStats = other.userStats_ != null ? other.UserStats.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStatsResponse Clone() {
      return new UserStatsResponse(this);
    }

    /// <summary>Field number for the "user_stats" field.</summary>
    public const int UserStatsFieldNumber = 1;
    private global::Protocol.UserStats userStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.UserStats UserStats {
      get { return userStats_; }
      set {
        userStats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserStatsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserStatsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserStats, other.UserStats)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userStats_ != null) hash ^= UserStats.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userStats_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserStats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserStats);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserStatsResponse other) {
      if (other == null) {
        return;
      }
      if (other.userStats_ != null) {
        if (userStats_ == null) {
          userStats_ = new global::Protocol.UserStats();
        }
        UserStats.MergeFrom(other.UserStats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userStats_ == null) {
              userStats_ = new global::Protocol.UserStats();
            }
            input.ReadMessage(userStats_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  un message vide, qui servira à déclencher l'envoi d'un UserStatsResponse de
  ///  la part du serveur vers le client
  /// </summary>
  public sealed partial class GetUserStats : pb::IMessage<GetUserStats> {
    private static readonly pb::MessageParser<GetUserStats> _parser = new pb::MessageParser<GetUserStats>(() => new GetUserStats());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUserStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserStats(GetUserStats other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserStats Clone() {
      return new GetUserStats(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUserStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUserStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUserStats other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class LeaveRoom : pb::IMessage<LeaveRoom> {
    private static readonly pb::MessageParser<LeaveRoom> _parser = new pb::MessageParser<LeaveRoom>(() => new LeaveRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoom(LeaveRoom other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoom Clone() {
      return new LeaveRoom(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoom other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetGlobalRecord : pb::IMessage<GetGlobalRecord> {
    private static readonly pb::MessageParser<GetGlobalRecord> _parser = new pb::MessageParser<GetGlobalRecord>(() => new GetGlobalRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGlobalRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGlobalRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGlobalRecord(GetGlobalRecord other) : this() {
      track_ = other.track_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGlobalRecord Clone() {
      return new GetGlobalRecord(this);
    }

    /// <summary>Field number for the "track" field.</summary>
    public const int TrackFieldNumber = 1;
    private int track_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Track {
      get { return track_; }
      set {
        track_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGlobalRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGlobalRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Track != other.Track) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Track != 0) hash ^= Track.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Track != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Track);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Track != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Track);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGlobalRecord other) {
      if (other == null) {
        return;
      }
      if (other.Track != 0) {
        Track = other.Track;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Track = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetGlobalRecord : pb::IMessage<SetGlobalRecord> {
    private static readonly pb::MessageParser<SetGlobalRecord> _parser = new pb::MessageParser<SetGlobalRecord>(() => new SetGlobalRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGlobalRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGlobalRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGlobalRecord(SetGlobalRecord other) : this() {
      track_ = other.track_;
      record_ = other.record_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGlobalRecord Clone() {
      return new SetGlobalRecord(this);
    }

    /// <summary>Field number for the "track" field.</summary>
    public const int TrackFieldNumber = 1;
    private int track_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Track {
      get { return track_; }
      set {
        track_ = value;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 2;
    private string record_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Record {
      get { return record_; }
      set {
        record_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGlobalRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGlobalRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Track != other.Track) return false;
      if (Record != other.Record) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Track != 0) hash ^= Track.GetHashCode();
      if (Record.Length != 0) hash ^= Record.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Track != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Track);
      }
      if (Record.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Record);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Track != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Track);
      }
      if (Record.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Record);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGlobalRecord other) {
      if (other == null) {
        return;
      }
      if (other.Track != 0) {
        Track = other.Track;
      }
      if (other.Record.Length != 0) {
        Record = other.Record;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Track = input.ReadInt32();
            break;
          }
          case 18: {
            Record = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  message that can be exchanged between the client and the server
  ///  TYPE = "chat_message" if ChatMessage (for example)
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      type_ = other.type_;
      switch (other.MsgCase) {
        case MsgOneofCase.ChatMessage:
          ChatMessage = other.ChatMessage.Clone();
          break;
        case MsgOneofCase.UpdatePlayerPosition:
          UpdatePlayerPosition = other.UpdatePlayerPosition.Clone();
          break;
        case MsgOneofCase.UpdatePlayerStatus:
          UpdatePlayerStatus = other.UpdatePlayerStatus.Clone();
          break;
        case MsgOneofCase.Disconnect:
          Disconnect = other.Disconnect.Clone();
          break;
        case MsgOneofCase.UpdatePlayerStatusRequest:
          UpdatePlayerStatusRequest = other.UpdatePlayerStatusRequest.Clone();
          break;
        case MsgOneofCase.CreateRoom:
          CreateRoom = other.CreateRoom.Clone();
          break;
        case MsgOneofCase.StartRoom:
          StartRoom = other.StartRoom.Clone();
          break;
        case MsgOneofCase.JoinRoomRequest:
          JoinRoomRequest = other.JoinRoomRequest.Clone();
          break;
        case MsgOneofCase.StartingPosition:
          StartingPosition = other.StartingPosition.Clone();
          break;
        case MsgOneofCase.RegisterRequest:
          RegisterRequest = other.RegisterRequest.Clone();
          break;
        case MsgOneofCase.LoginRequest:
          LoginRequest = other.LoginRequest.Clone();
          break;
        case MsgOneofCase.RegisterResponse:
          RegisterResponse = other.RegisterResponse.Clone();
          break;
        case MsgOneofCase.LoginResponse:
          LoginResponse = other.LoginResponse.Clone();
          break;
        case MsgOneofCase.RoomListRequest:
          RoomListRequest = other.RoomListRequest.Clone();
          break;
        case MsgOneofCase.RoomListResponse:
          RoomListResponse = other.RoomListResponse.Clone();
          break;
        case MsgOneofCase.ChangeUsername:
          ChangeUsername = other.ChangeUsername.Clone();
          break;
        case MsgOneofCase.JoinRoomResponse:
          JoinRoomResponse = other.JoinRoomResponse.Clone();
          break;
        case MsgOneofCase.SetUserStats:
          SetUserStats = other.SetUserStats.Clone();
          break;
        case MsgOneofCase.GetUserStats:
          GetUserStats = other.GetUserStats.Clone();
          break;
        case MsgOneofCase.LeaveRoom:
          LeaveRoom = other.LeaveRoom.Clone();
          break;
        case MsgOneofCase.GetGlobalRecord:
          GetGlobalRecord = other.GetGlobalRecord.Clone();
          break;
        case MsgOneofCase.SetGlobalRecord:
          SetGlobalRecord = other.SetGlobalRecord.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    ///  easier for fetching datas
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chat_message" field.</summary>
    public const int ChatMessageFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ChatMessage ChatMessage {
      get { return msgCase_ == MsgOneofCase.ChatMessage ? (global::Protocol.ChatMessage) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ChatMessage;
      }
    }

    /// <summary>Field number for the "update_player_position" field.</summary>
    public const int UpdatePlayerPositionFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.UpdatePlayerPosition UpdatePlayerPosition {
      get { return msgCase_ == MsgOneofCase.UpdatePlayerPosition ? (global::Protocol.UpdatePlayerPosition) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.UpdatePlayerPosition;
      }
    }

    /// <summary>Field number for the "update_player_status" field.</summary>
    public const int UpdatePlayerStatusFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.UpdatePlayerStatus UpdatePlayerStatus {
      get { return msgCase_ == MsgOneofCase.UpdatePlayerStatus ? (global::Protocol.UpdatePlayerStatus) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.UpdatePlayerStatus;
      }
    }

    /// <summary>Field number for the "disconnect" field.</summary>
    public const int DisconnectFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Disconnect Disconnect {
      get { return msgCase_ == MsgOneofCase.Disconnect ? (global::Protocol.Disconnect) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Disconnect;
      }
    }

    /// <summary>Field number for the "update_player_status_request" field.</summary>
    public const int UpdatePlayerStatusRequestFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.UpdatePlayerStatusRequest UpdatePlayerStatusRequest {
      get { return msgCase_ == MsgOneofCase.UpdatePlayerStatusRequest ? (global::Protocol.UpdatePlayerStatusRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.UpdatePlayerStatusRequest;
      }
    }

    /// <summary>Field number for the "create_room" field.</summary>
    public const int CreateRoomFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.CreateRoom CreateRoom {
      get { return msgCase_ == MsgOneofCase.CreateRoom ? (global::Protocol.CreateRoom) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CreateRoom;
      }
    }

    /// <summary>Field number for the "start_room" field.</summary>
    public const int StartRoomFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.StartRoom StartRoom {
      get { return msgCase_ == MsgOneofCase.StartRoom ? (global::Protocol.StartRoom) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StartRoom;
      }
    }

    /// <summary>Field number for the "join_room_request" field.</summary>
    public const int JoinRoomRequestFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.JoinRoomRequest JoinRoomRequest {
      get { return msgCase_ == MsgOneofCase.JoinRoomRequest ? (global::Protocol.JoinRoomRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.JoinRoomRequest;
      }
    }

    /// <summary>Field number for the "starting_position" field.</summary>
    public const int StartingPositionFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.StartingPosition StartingPosition {
      get { return msgCase_ == MsgOneofCase.StartingPosition ? (global::Protocol.StartingPosition) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StartingPosition;
      }
    }

    /// <summary>Field number for the "register_request" field.</summary>
    public const int RegisterRequestFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RegisterRequest RegisterRequest {
      get { return msgCase_ == MsgOneofCase.RegisterRequest ? (global::Protocol.RegisterRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RegisterRequest;
      }
    }

    /// <summary>Field number for the "login_request" field.</summary>
    public const int LoginRequestFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.LoginRequest LoginRequest {
      get { return msgCase_ == MsgOneofCase.LoginRequest ? (global::Protocol.LoginRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.LoginRequest;
      }
    }

    /// <summary>Field number for the "register_response" field.</summary>
    public const int RegisterResponseFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RegisterResponse RegisterResponse {
      get { return msgCase_ == MsgOneofCase.RegisterResponse ? (global::Protocol.RegisterResponse) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RegisterResponse;
      }
    }

    /// <summary>Field number for the "login_response" field.</summary>
    public const int LoginResponseFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.LoginResponse LoginResponse {
      get { return msgCase_ == MsgOneofCase.LoginResponse ? (global::Protocol.LoginResponse) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.LoginResponse;
      }
    }

    /// <summary>Field number for the "room_list_request" field.</summary>
    public const int RoomListRequestFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RoomListRequest RoomListRequest {
      get { return msgCase_ == MsgOneofCase.RoomListRequest ? (global::Protocol.RoomListRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RoomListRequest;
      }
    }

    /// <summary>Field number for the "room_list_response" field.</summary>
    public const int RoomListResponseFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RoomListResponse RoomListResponse {
      get { return msgCase_ == MsgOneofCase.RoomListResponse ? (global::Protocol.RoomListResponse) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RoomListResponse;
      }
    }

    /// <summary>Field number for the "change_username" field.</summary>
    public const int ChangeUsernameFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ChangeUsername ChangeUsername {
      get { return msgCase_ == MsgOneofCase.ChangeUsername ? (global::Protocol.ChangeUsername) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ChangeUsername;
      }
    }

    /// <summary>Field number for the "join_room_response" field.</summary>
    public const int JoinRoomResponseFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.JoinRoomResponse JoinRoomResponse {
      get { return msgCase_ == MsgOneofCase.JoinRoomResponse ? (global::Protocol.JoinRoomResponse) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.JoinRoomResponse;
      }
    }

    /// <summary>Field number for the "set_user_stats" field.</summary>
    public const int SetUserStatsFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SetUserStats SetUserStats {
      get { return msgCase_ == MsgOneofCase.SetUserStats ? (global::Protocol.SetUserStats) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SetUserStats;
      }
    }

    /// <summary>Field number for the "get_user_stats" field.</summary>
    public const int GetUserStatsFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GetUserStats GetUserStats {
      get { return msgCase_ == MsgOneofCase.GetUserStats ? (global::Protocol.GetUserStats) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GetUserStats;
      }
    }

    /// <summary>Field number for the "leave_room" field.</summary>
    public const int LeaveRoomFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.LeaveRoom LeaveRoom {
      get { return msgCase_ == MsgOneofCase.LeaveRoom ? (global::Protocol.LeaveRoom) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.LeaveRoom;
      }
    }

    /// <summary>Field number for the "get_global_record" field.</summary>
    public const int GetGlobalRecordFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.GetGlobalRecord GetGlobalRecord {
      get { return msgCase_ == MsgOneofCase.GetGlobalRecord ? (global::Protocol.GetGlobalRecord) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GetGlobalRecord;
      }
    }

    /// <summary>Field number for the "set_global_record" field.</summary>
    public const int SetGlobalRecordFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SetGlobalRecord SetGlobalRecord {
      get { return msgCase_ == MsgOneofCase.SetGlobalRecord ? (global::Protocol.SetGlobalRecord) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SetGlobalRecord;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      ChatMessage = 2,
      UpdatePlayerPosition = 3,
      UpdatePlayerStatus = 4,
      Disconnect = 5,
      UpdatePlayerStatusRequest = 6,
      CreateRoom = 7,
      StartRoom = 8,
      JoinRoomRequest = 9,
      StartingPosition = 10,
      RegisterRequest = 11,
      LoginRequest = 12,
      RegisterResponse = 13,
      LoginResponse = 14,
      RoomListRequest = 15,
      RoomListResponse = 16,
      ChangeUsername = 17,
      JoinRoomResponse = 18,
      SetUserStats = 19,
      GetUserStats = 20,
      LeaveRoom = 21,
      GetGlobalRecord = 22,
      SetGlobalRecord = 23,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(ChatMessage, other.ChatMessage)) return false;
      if (!object.Equals(UpdatePlayerPosition, other.UpdatePlayerPosition)) return false;
      if (!object.Equals(UpdatePlayerStatus, other.UpdatePlayerStatus)) return false;
      if (!object.Equals(Disconnect, other.Disconnect)) return false;
      if (!object.Equals(UpdatePlayerStatusRequest, other.UpdatePlayerStatusRequest)) return false;
      if (!object.Equals(CreateRoom, other.CreateRoom)) return false;
      if (!object.Equals(StartRoom, other.StartRoom)) return false;
      if (!object.Equals(JoinRoomRequest, other.JoinRoomRequest)) return false;
      if (!object.Equals(StartingPosition, other.StartingPosition)) return false;
      if (!object.Equals(RegisterRequest, other.RegisterRequest)) return false;
      if (!object.Equals(LoginRequest, other.LoginRequest)) return false;
      if (!object.Equals(RegisterResponse, other.RegisterResponse)) return false;
      if (!object.Equals(LoginResponse, other.LoginResponse)) return false;
      if (!object.Equals(RoomListRequest, other.RoomListRequest)) return false;
      if (!object.Equals(RoomListResponse, other.RoomListResponse)) return false;
      if (!object.Equals(ChangeUsername, other.ChangeUsername)) return false;
      if (!object.Equals(JoinRoomResponse, other.JoinRoomResponse)) return false;
      if (!object.Equals(SetUserStats, other.SetUserStats)) return false;
      if (!object.Equals(GetUserStats, other.GetUserStats)) return false;
      if (!object.Equals(LeaveRoom, other.LeaveRoom)) return false;
      if (!object.Equals(GetGlobalRecord, other.GetGlobalRecord)) return false;
      if (!object.Equals(SetGlobalRecord, other.SetGlobalRecord)) return false;
      if (MsgCase != other.MsgCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (msgCase_ == MsgOneofCase.ChatMessage) hash ^= ChatMessage.GetHashCode();
      if (msgCase_ == MsgOneofCase.UpdatePlayerPosition) hash ^= UpdatePlayerPosition.GetHashCode();
      if (msgCase_ == MsgOneofCase.UpdatePlayerStatus) hash ^= UpdatePlayerStatus.GetHashCode();
      if (msgCase_ == MsgOneofCase.Disconnect) hash ^= Disconnect.GetHashCode();
      if (msgCase_ == MsgOneofCase.UpdatePlayerStatusRequest) hash ^= UpdatePlayerStatusRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.CreateRoom) hash ^= CreateRoom.GetHashCode();
      if (msgCase_ == MsgOneofCase.StartRoom) hash ^= StartRoom.GetHashCode();
      if (msgCase_ == MsgOneofCase.JoinRoomRequest) hash ^= JoinRoomRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.StartingPosition) hash ^= StartingPosition.GetHashCode();
      if (msgCase_ == MsgOneofCase.RegisterRequest) hash ^= RegisterRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.LoginRequest) hash ^= LoginRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.RegisterResponse) hash ^= RegisterResponse.GetHashCode();
      if (msgCase_ == MsgOneofCase.LoginResponse) hash ^= LoginResponse.GetHashCode();
      if (msgCase_ == MsgOneofCase.RoomListRequest) hash ^= RoomListRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.RoomListResponse) hash ^= RoomListResponse.GetHashCode();
      if (msgCase_ == MsgOneofCase.ChangeUsername) hash ^= ChangeUsername.GetHashCode();
      if (msgCase_ == MsgOneofCase.JoinRoomResponse) hash ^= JoinRoomResponse.GetHashCode();
      if (msgCase_ == MsgOneofCase.SetUserStats) hash ^= SetUserStats.GetHashCode();
      if (msgCase_ == MsgOneofCase.GetUserStats) hash ^= GetUserStats.GetHashCode();
      if (msgCase_ == MsgOneofCase.LeaveRoom) hash ^= LeaveRoom.GetHashCode();
      if (msgCase_ == MsgOneofCase.GetGlobalRecord) hash ^= GetGlobalRecord.GetHashCode();
      if (msgCase_ == MsgOneofCase.SetGlobalRecord) hash ^= SetGlobalRecord.GetHashCode();
      hash ^= (int) msgCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (msgCase_ == MsgOneofCase.ChatMessage) {
        output.WriteRawTag(18);
        output.WriteMessage(ChatMessage);
      }
      if (msgCase_ == MsgOneofCase.UpdatePlayerPosition) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdatePlayerPosition);
      }
      if (msgCase_ == MsgOneofCase.UpdatePlayerStatus) {
        output.WriteRawTag(34);
        output.WriteMessage(UpdatePlayerStatus);
      }
      if (msgCase_ == MsgOneofCase.Disconnect) {
        output.WriteRawTag(42);
        output.WriteMessage(Disconnect);
      }
      if (msgCase_ == MsgOneofCase.UpdatePlayerStatusRequest) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdatePlayerStatusRequest);
      }
      if (msgCase_ == MsgOneofCase.CreateRoom) {
        output.WriteRawTag(58);
        output.WriteMessage(CreateRoom);
      }
      if (msgCase_ == MsgOneofCase.StartRoom) {
        output.WriteRawTag(66);
        output.WriteMessage(StartRoom);
      }
      if (msgCase_ == MsgOneofCase.JoinRoomRequest) {
        output.WriteRawTag(74);
        output.WriteMessage(JoinRoomRequest);
      }
      if (msgCase_ == MsgOneofCase.StartingPosition) {
        output.WriteRawTag(82);
        output.WriteMessage(StartingPosition);
      }
      if (msgCase_ == MsgOneofCase.RegisterRequest) {
        output.WriteRawTag(90);
        output.WriteMessage(RegisterRequest);
      }
      if (msgCase_ == MsgOneofCase.LoginRequest) {
        output.WriteRawTag(98);
        output.WriteMessage(LoginRequest);
      }
      if (msgCase_ == MsgOneofCase.RegisterResponse) {
        output.WriteRawTag(106);
        output.WriteMessage(RegisterResponse);
      }
      if (msgCase_ == MsgOneofCase.LoginResponse) {
        output.WriteRawTag(114);
        output.WriteMessage(LoginResponse);
      }
      if (msgCase_ == MsgOneofCase.RoomListRequest) {
        output.WriteRawTag(122);
        output.WriteMessage(RoomListRequest);
      }
      if (msgCase_ == MsgOneofCase.RoomListResponse) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(RoomListResponse);
      }
      if (msgCase_ == MsgOneofCase.ChangeUsername) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ChangeUsername);
      }
      if (msgCase_ == MsgOneofCase.JoinRoomResponse) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(JoinRoomResponse);
      }
      if (msgCase_ == MsgOneofCase.SetUserStats) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(SetUserStats);
      }
      if (msgCase_ == MsgOneofCase.GetUserStats) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(GetUserStats);
      }
      if (msgCase_ == MsgOneofCase.LeaveRoom) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(LeaveRoom);
      }
      if (msgCase_ == MsgOneofCase.GetGlobalRecord) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(GetGlobalRecord);
      }
      if (msgCase_ == MsgOneofCase.SetGlobalRecord) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SetGlobalRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (msgCase_ == MsgOneofCase.ChatMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatMessage);
      }
      if (msgCase_ == MsgOneofCase.UpdatePlayerPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatePlayerPosition);
      }
      if (msgCase_ == MsgOneofCase.UpdatePlayerStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatePlayerStatus);
      }
      if (msgCase_ == MsgOneofCase.Disconnect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Disconnect);
      }
      if (msgCase_ == MsgOneofCase.UpdatePlayerStatusRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatePlayerStatusRequest);
      }
      if (msgCase_ == MsgOneofCase.CreateRoom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateRoom);
      }
      if (msgCase_ == MsgOneofCase.StartRoom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartRoom);
      }
      if (msgCase_ == MsgOneofCase.JoinRoomRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinRoomRequest);
      }
      if (msgCase_ == MsgOneofCase.StartingPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartingPosition);
      }
      if (msgCase_ == MsgOneofCase.RegisterRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterRequest);
      }
      if (msgCase_ == MsgOneofCase.LoginRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginRequest);
      }
      if (msgCase_ == MsgOneofCase.RegisterResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterResponse);
      }
      if (msgCase_ == MsgOneofCase.LoginResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginResponse);
      }
      if (msgCase_ == MsgOneofCase.RoomListRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomListRequest);
      }
      if (msgCase_ == MsgOneofCase.RoomListResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RoomListResponse);
      }
      if (msgCase_ == MsgOneofCase.ChangeUsername) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChangeUsername);
      }
      if (msgCase_ == MsgOneofCase.JoinRoomResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinRoomResponse);
      }
      if (msgCase_ == MsgOneofCase.SetUserStats) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetUserStats);
      }
      if (msgCase_ == MsgOneofCase.GetUserStats) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetUserStats);
      }
      if (msgCase_ == MsgOneofCase.LeaveRoom) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaveRoom);
      }
      if (msgCase_ == MsgOneofCase.GetGlobalRecord) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetGlobalRecord);
      }
      if (msgCase_ == MsgOneofCase.SetGlobalRecord) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetGlobalRecord);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.ChatMessage:
          ChatMessage = other.ChatMessage;
          break;
        case MsgOneofCase.UpdatePlayerPosition:
          UpdatePlayerPosition = other.UpdatePlayerPosition;
          break;
        case MsgOneofCase.UpdatePlayerStatus:
          UpdatePlayerStatus = other.UpdatePlayerStatus;
          break;
        case MsgOneofCase.Disconnect:
          Disconnect = other.Disconnect;
          break;
        case MsgOneofCase.UpdatePlayerStatusRequest:
          UpdatePlayerStatusRequest = other.UpdatePlayerStatusRequest;
          break;
        case MsgOneofCase.CreateRoom:
          CreateRoom = other.CreateRoom;
          break;
        case MsgOneofCase.StartRoom:
          StartRoom = other.StartRoom;
          break;
        case MsgOneofCase.JoinRoomRequest:
          JoinRoomRequest = other.JoinRoomRequest;
          break;
        case MsgOneofCase.StartingPosition:
          StartingPosition = other.StartingPosition;
          break;
        case MsgOneofCase.RegisterRequest:
          RegisterRequest = other.RegisterRequest;
          break;
        case MsgOneofCase.LoginRequest:
          LoginRequest = other.LoginRequest;
          break;
        case MsgOneofCase.RegisterResponse:
          RegisterResponse = other.RegisterResponse;
          break;
        case MsgOneofCase.LoginResponse:
          LoginResponse = other.LoginResponse;
          break;
        case MsgOneofCase.RoomListRequest:
          RoomListRequest = other.RoomListRequest;
          break;
        case MsgOneofCase.RoomListResponse:
          RoomListResponse = other.RoomListResponse;
          break;
        case MsgOneofCase.ChangeUsername:
          ChangeUsername = other.ChangeUsername;
          break;
        case MsgOneofCase.JoinRoomResponse:
          JoinRoomResponse = other.JoinRoomResponse;
          break;
        case MsgOneofCase.SetUserStats:
          SetUserStats = other.SetUserStats;
          break;
        case MsgOneofCase.GetUserStats:
          GetUserStats = other.GetUserStats;
          break;
        case MsgOneofCase.LeaveRoom:
          LeaveRoom = other.LeaveRoom;
          break;
        case MsgOneofCase.GetGlobalRecord:
          GetGlobalRecord = other.GetGlobalRecord;
          break;
        case MsgOneofCase.SetGlobalRecord:
          SetGlobalRecord = other.SetGlobalRecord;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            global::Protocol.ChatMessage subBuilder = new global::Protocol.ChatMessage();
            if (msgCase_ == MsgOneofCase.ChatMessage) {
              subBuilder.MergeFrom(ChatMessage);
            }
            input.ReadMessage(subBuilder);
            ChatMessage = subBuilder;
            break;
          }
          case 26: {
            global::Protocol.UpdatePlayerPosition subBuilder = new global::Protocol.UpdatePlayerPosition();
            if (msgCase_ == MsgOneofCase.UpdatePlayerPosition) {
              subBuilder.MergeFrom(UpdatePlayerPosition);
            }
            input.ReadMessage(subBuilder);
            UpdatePlayerPosition = subBuilder;
            break;
          }
          case 34: {
            global::Protocol.UpdatePlayerStatus subBuilder = new global::Protocol.UpdatePlayerStatus();
            if (msgCase_ == MsgOneofCase.UpdatePlayerStatus) {
              subBuilder.MergeFrom(UpdatePlayerStatus);
            }
            input.ReadMessage(subBuilder);
            UpdatePlayerStatus = subBuilder;
            break;
          }
          case 42: {
            global::Protocol.Disconnect subBuilder = new global::Protocol.Disconnect();
            if (msgCase_ == MsgOneofCase.Disconnect) {
              subBuilder.MergeFrom(Disconnect);
            }
            input.ReadMessage(subBuilder);
            Disconnect = subBuilder;
            break;
          }
          case 50: {
            global::Protocol.UpdatePlayerStatusRequest subBuilder = new global::Protocol.UpdatePlayerStatusRequest();
            if (msgCase_ == MsgOneofCase.UpdatePlayerStatusRequest) {
              subBuilder.MergeFrom(UpdatePlayerStatusRequest);
            }
            input.ReadMessage(subBuilder);
            UpdatePlayerStatusRequest = subBuilder;
            break;
          }
          case 58: {
            global::Protocol.CreateRoom subBuilder = new global::Protocol.CreateRoom();
            if (msgCase_ == MsgOneofCase.CreateRoom) {
              subBuilder.MergeFrom(CreateRoom);
            }
            input.ReadMessage(subBuilder);
            CreateRoom = subBuilder;
            break;
          }
          case 66: {
            global::Protocol.StartRoom subBuilder = new global::Protocol.StartRoom();
            if (msgCase_ == MsgOneofCase.StartRoom) {
              subBuilder.MergeFrom(StartRoom);
            }
            input.ReadMessage(subBuilder);
            StartRoom = subBuilder;
            break;
          }
          case 74: {
            global::Protocol.JoinRoomRequest subBuilder = new global::Protocol.JoinRoomRequest();
            if (msgCase_ == MsgOneofCase.JoinRoomRequest) {
              subBuilder.MergeFrom(JoinRoomRequest);
            }
            input.ReadMessage(subBuilder);
            JoinRoomRequest = subBuilder;
            break;
          }
          case 82: {
            global::Protocol.StartingPosition subBuilder = new global::Protocol.StartingPosition();
            if (msgCase_ == MsgOneofCase.StartingPosition) {
              subBuilder.MergeFrom(StartingPosition);
            }
            input.ReadMessage(subBuilder);
            StartingPosition = subBuilder;
            break;
          }
          case 90: {
            global::Protocol.RegisterRequest subBuilder = new global::Protocol.RegisterRequest();
            if (msgCase_ == MsgOneofCase.RegisterRequest) {
              subBuilder.MergeFrom(RegisterRequest);
            }
            input.ReadMessage(subBuilder);
            RegisterRequest = subBuilder;
            break;
          }
          case 98: {
            global::Protocol.LoginRequest subBuilder = new global::Protocol.LoginRequest();
            if (msgCase_ == MsgOneofCase.LoginRequest) {
              subBuilder.MergeFrom(LoginRequest);
            }
            input.ReadMessage(subBuilder);
            LoginRequest = subBuilder;
            break;
          }
          case 106: {
            global::Protocol.RegisterResponse subBuilder = new global::Protocol.RegisterResponse();
            if (msgCase_ == MsgOneofCase.RegisterResponse) {
              subBuilder.MergeFrom(RegisterResponse);
            }
            input.ReadMessage(subBuilder);
            RegisterResponse = subBuilder;
            break;
          }
          case 114: {
            global::Protocol.LoginResponse subBuilder = new global::Protocol.LoginResponse();
            if (msgCase_ == MsgOneofCase.LoginResponse) {
              subBuilder.MergeFrom(LoginResponse);
            }
            input.ReadMessage(subBuilder);
            LoginResponse = subBuilder;
            break;
          }
          case 122: {
            global::Protocol.RoomListRequest subBuilder = new global::Protocol.RoomListRequest();
            if (msgCase_ == MsgOneofCase.RoomListRequest) {
              subBuilder.MergeFrom(RoomListRequest);
            }
            input.ReadMessage(subBuilder);
            RoomListRequest = subBuilder;
            break;
          }
          case 130: {
            global::Protocol.RoomListResponse subBuilder = new global::Protocol.RoomListResponse();
            if (msgCase_ == MsgOneofCase.RoomListResponse) {
              subBuilder.MergeFrom(RoomListResponse);
            }
            input.ReadMessage(subBuilder);
            RoomListResponse = subBuilder;
            break;
          }
          case 138: {
            global::Protocol.ChangeUsername subBuilder = new global::Protocol.ChangeUsername();
            if (msgCase_ == MsgOneofCase.ChangeUsername) {
              subBuilder.MergeFrom(ChangeUsername);
            }
            input.ReadMessage(subBuilder);
            ChangeUsername = subBuilder;
            break;
          }
          case 146: {
            global::Protocol.JoinRoomResponse subBuilder = new global::Protocol.JoinRoomResponse();
            if (msgCase_ == MsgOneofCase.JoinRoomResponse) {
              subBuilder.MergeFrom(JoinRoomResponse);
            }
            input.ReadMessage(subBuilder);
            JoinRoomResponse = subBuilder;
            break;
          }
          case 154: {
            global::Protocol.SetUserStats subBuilder = new global::Protocol.SetUserStats();
            if (msgCase_ == MsgOneofCase.SetUserStats) {
              subBuilder.MergeFrom(SetUserStats);
            }
            input.ReadMessage(subBuilder);
            SetUserStats = subBuilder;
            break;
          }
          case 162: {
            global::Protocol.GetUserStats subBuilder = new global::Protocol.GetUserStats();
            if (msgCase_ == MsgOneofCase.GetUserStats) {
              subBuilder.MergeFrom(GetUserStats);
            }
            input.ReadMessage(subBuilder);
            GetUserStats = subBuilder;
            break;
          }
          case 170: {
            global::Protocol.LeaveRoom subBuilder = new global::Protocol.LeaveRoom();
            if (msgCase_ == MsgOneofCase.LeaveRoom) {
              subBuilder.MergeFrom(LeaveRoom);
            }
            input.ReadMessage(subBuilder);
            LeaveRoom = subBuilder;
            break;
          }
          case 178: {
            global::Protocol.GetGlobalRecord subBuilder = new global::Protocol.GetGlobalRecord();
            if (msgCase_ == MsgOneofCase.GetGlobalRecord) {
              subBuilder.MergeFrom(GetGlobalRecord);
            }
            input.ReadMessage(subBuilder);
            GetGlobalRecord = subBuilder;
            break;
          }
          case 186: {
            global::Protocol.SetGlobalRecord subBuilder = new global::Protocol.SetGlobalRecord();
            if (msgCase_ == MsgOneofCase.SetGlobalRecord) {
              subBuilder.MergeFrom(SetGlobalRecord);
            }
            input.ReadMessage(subBuilder);
            SetGlobalRecord = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
