// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXNzYWdlcy5wcm90bxIIcHJvdG9jb2wiKQoGVmVjdG9yEgkKAXgYASAB",
            "KAISCQoBeRgCIAEoAhIJCgF6GAMgASgCIrIBChRVcGRhdGVQbGF5ZXJQb3Np",
            "dGlvbhIiCghwb3NpdGlvbhgBIAEoCzIQLnByb3RvY29sLlZlY3RvchIjCglk",
            "aXJlY3Rpb24YAiABKAsyEC5wcm90b2NvbC5WZWN0b3ISHwoFc2NhbGUYAyAB",
            "KAsyEC5wcm90b2NvbC5WZWN0b3ISDAoEdXNlchgEIAEoCRIiCgh2ZWxvY2l0",
            "eRgFIAEoCzIQLnByb3RvY29sLlZlY3RvciKXAgoSVXBkYXRlUGxheWVyU3Rh",
            "dHVzEhQKDHdlbnRfdGhyb3VnaBgBIAMoCBIRCglsYXBfY291bnQYAiABKAUS",
            "HQoVaGFzX2hpdF9zX2ZfbGluZV9vbmNlGAMgASgIEhAKCGNwX2NvdW50GAQg",
            "ASgFEh4KFm5leHRfY2hlY2twb2ludF9udW1iZXIYBSABKAUSJwofc3VwcG9z",
            "ZWRfbmV4dF9jaGVja3BvaW50X251bWJlchgGIAEoBRIMCgR1c2VyGAcgASgJ",
            "EhkKEXZpcnR1YWxfbGFwX2NvdW50GAggASgFEhYKDmxhc3RfaGl0dGVkX2Nw",
            "GAkgASgFEh0KFXNlY29uZF9sYXN0X2hpdHRlZF9jcBgKIAEoBSIbChlVcGRh",
            "dGVQbGF5ZXJTdGF0dXNSZXF1ZXN0IiwKC0NoYXRNZXNzYWdlEg8KB2NvbnRl",
            "bnQYASABKAkSDAoEdXNlchgCIAEoCSIaCgpEaXNjb25uZWN0EgwKBHVzZXIY",
            "ASABKAkiSAoKQ3JlYXRlUm9vbRIRCglyb29tX3R5cGUYASABKAUSEgoKaWRf",
            "Y2lyY3VpdBgCIAEoBRITCgttYXhfcGxheWVycxgDIAEoBSIRCg9Sb29tTGlz",
            "dFJlcXVlc3QiOQoQUm9vbUxpc3RSZXNwb25zZRIlCglyb29tX2xpc3QYASAD",
            "KAsyEi5wcm90b2NvbC5Sb29tTGlzdCLLAQoIUm9vbUxpc3QSCgoCaWQYASAB",
            "KAkSEQoJcm9vbV90eXBlGAIgASgFEhIKCmlkX2NpcmN1aXQYAyABKAUSEwoL",
            "bWF4X3BsYXllcnMYBCABKAUSEgoKbmJfcGxheWVycxgFIAEoBRIYChBwbGF5",
            "ZXJzX3VzZXJuYW1lGAYgAygJEhgKEHBsYXllcnNfbmJfcmFjZXMYByADKAUS",
            "FwoPcGxheWVyc19uYl93aW5zGAggAygFEhYKDnBsYXllcnNfcmVjb3JkGAkg",
            "AygJIhcKCVN0YXJ0Um9vbRIKCgJpZBgBIAEoCSIWCghKb2luUm9vbRIKCgJp",
            "ZBgBIAEoCSIkChBTdGFydGluZ1Bvc2l0aW9uEhAKCHBvc2l0aW9uGAEgAygF",
            "IjUKD1JlZ2lzdGVyUmVxdWVzdBIQCgh1c2VybmFtZRgBIAEoCRIQCghwYXNz",
            "d29yZBgCIAEoCSIyCgxMb2dpblJlcXVlc3QSEAoIdXNlcm5hbWUYASABKAkS",
            "EAoIcGFzc3dvcmQYAiABKAkiNQoQUmVnaXN0ZXJSZXNwb25zZRIPCgdzdWNj",
            "ZXNzGAEgASgIEhAKCHVzZXJuYW1lGAIgASgJIjIKDUxvZ2luUmVzcG9uc2US",
            "DwoHc3VjY2VzcxgBIAEoCBIQCgh1c2VybmFtZRgCIAEoCSLGBgoHTWVzc2Fn",
            "ZRIMCgR0eXBlGAEgASgJEi0KDGNoYXRfbWVzc2FnZRgCIAEoCzIVLnByb3Rv",
            "Y29sLkNoYXRNZXNzYWdlSAASQAoWdXBkYXRlX3BsYXllcl9wb3NpdGlvbhgD",
            "IAEoCzIeLnByb3RvY29sLlVwZGF0ZVBsYXllclBvc2l0aW9uSAASPAoUdXBk",
            "YXRlX3BsYXllcl9zdGF0dXMYBCABKAsyHC5wcm90b2NvbC5VcGRhdGVQbGF5",
            "ZXJTdGF0dXNIABIqCgpkaXNjb25uZWN0GAUgASgLMhQucHJvdG9jb2wuRGlz",
            "Y29ubmVjdEgAEksKHHVwZGF0ZV9wbGF5ZXJfc3RhdHVzX3JlcXVlc3QYBiAB",
            "KAsyIy5wcm90b2NvbC5VcGRhdGVQbGF5ZXJTdGF0dXNSZXF1ZXN0SAASKwoL",
            "Y3JlYXRlX3Jvb20YByABKAsyFC5wcm90b2NvbC5DcmVhdGVSb29tSAASKQoK",
            "c3RhcnRfcm9vbRgIIAEoCzITLnByb3RvY29sLlN0YXJ0Um9vbUgAEicKCWpv",
            "aW5fcm9vbRgJIAEoCzISLnByb3RvY29sLkpvaW5Sb29tSAASNwoRc3RhcnRp",
            "bmdfcG9zaXRpb24YCiABKAsyGi5wcm90b2NvbC5TdGFydGluZ1Bvc2l0aW9u",
            "SAASNQoQcmVnaXN0ZXJfcmVxdWVzdBgLIAEoCzIZLnByb3RvY29sLlJlZ2lz",
            "dGVyUmVxdWVzdEgAEi8KDWxvZ2luX3JlcXVlc3QYDCABKAsyFi5wcm90b2Nv",
            "bC5Mb2dpblJlcXVlc3RIABI3ChFyZWdpc3Rlcl9yZXNwb25zZRgNIAEoCzIa",
            "LnByb3RvY29sLlJlZ2lzdGVyUmVzcG9uc2VIABIxCg5sb2dpbl9yZXNwb25z",
            "ZRgOIAEoCzIXLnByb3RvY29sLkxvZ2luUmVzcG9uc2VIABI2ChFyb29tX2xp",
            "c3RfcmVxdWVzdBgPIAEoCzIZLnByb3RvY29sLlJvb21MaXN0UmVxdWVzdEgA",
            "EjgKEnJvb21fbGlzdF9yZXNwb25zZRgQIAEoCzIaLnByb3RvY29sLlJvb21M",
            "aXN0UmVzcG9uc2VIAEIFCgNtc2diBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Vector), global::Protocol.Vector.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UpdatePlayerPosition), global::Protocol.UpdatePlayerPosition.Parser, new[]{ "Position", "Direction", "Scale", "User", "Velocity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UpdatePlayerStatus), global::Protocol.UpdatePlayerStatus.Parser, new[]{ "WentThrough", "LapCount", "HasHitSFLineOnce", "CpCount", "NextCheckpointNumber", "SupposedNextCheckpointNumber", "User", "VirtualLapCount", "LastHittedCp", "SecondLastHittedCp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.UpdatePlayerStatusRequest), global::Protocol.UpdatePlayerStatusRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChatMessage), global::Protocol.ChatMessage.Parser, new[]{ "Content", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Disconnect), global::Protocol.Disconnect.Parser, new[]{ "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.CreateRoom), global::Protocol.CreateRoom.Parser, new[]{ "RoomType", "IdCircuit", "MaxPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RoomListRequest), global::Protocol.RoomListRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RoomListResponse), global::Protocol.RoomListResponse.Parser, new[]{ "RoomList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RoomList), global::Protocol.RoomList.Parser, new[]{ "Id", "RoomType", "IdCircuit", "MaxPlayers", "NbPlayers", "PlayersUsername", "PlayersNbRaces", "PlayersNbWins", "PlayersRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.StartRoom), global::Protocol.StartRoom.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.JoinRoom), global::Protocol.JoinRoom.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.StartingPosition), global::Protocol.StartingPosition.Parser, new[]{ "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RegisterRequest), global::Protocol.RegisterRequest.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LoginRequest), global::Protocol.LoginRequest.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.RegisterResponse), global::Protocol.RegisterResponse.Parser, new[]{ "Success", "Username" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.LoginResponse), global::Protocol.LoginResponse.Parser, new[]{ "Success", "Username" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Message), global::Protocol.Message.Parser, new[]{ "Type", "ChatMessage", "UpdatePlayerPosition", "UpdatePlayerStatus", "Disconnect", "UpdatePlayerStatusRequest", "CreateRoom", "StartRoom", "JoinRoom", "StartingPosition", "RegisterRequest", "LoginRequest", "RegisterResponse", "LoginResponse", "RoomListRequest", "RoomListResponse" }, new[]{ "Msg" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Vector3
  /// </summary>
  public sealed partial class Vector : pb::IMessage<Vector> {
    private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector(Vector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector Clone() {
      return new Vector(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  update the position of a user
  /// </summary>
  public sealed partial class UpdatePlayerPosition : pb::IMessage<UpdatePlayerPosition> {
    private static readonly pb::MessageParser<UpdatePlayerPosition> _parser = new pb::MessageParser<UpdatePlayerPosition>(() => new UpdatePlayerPosition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePlayerPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerPosition(UpdatePlayerPosition other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      Direction = other.direction_ != null ? other.Direction.Clone() : null;
      Scale = other.scale_ != null ? other.Scale.Clone() : null;
      user_ = other.user_;
      Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerPosition Clone() {
      return new UpdatePlayerPosition(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Protocol.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private global::Protocol.Vector direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Vector Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private global::Protocol.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 4;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 5;
    private global::Protocol.Vector velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Vector Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePlayerPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePlayerPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (User != other.User) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (direction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Direction);
      }
      if (scale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scale);
      }
      if (User.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(User);
      }
      if (velocity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Velocity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePlayerPosition other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Protocol.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          direction_ = new global::Protocol.Vector();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          scale_ = new global::Protocol.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::Protocol.Vector();
        }
        Velocity.MergeFrom(other.Velocity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Protocol.Vector();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (direction_ == null) {
              direction_ = new global::Protocol.Vector();
            }
            input.ReadMessage(direction_);
            break;
          }
          case 26: {
            if (scale_ == null) {
              scale_ = new global::Protocol.Vector();
            }
            input.ReadMessage(scale_);
            break;
          }
          case 34: {
            User = input.ReadString();
            break;
          }
          case 42: {
            if (velocity_ == null) {
              velocity_ = new global::Protocol.Vector();
            }
            input.ReadMessage(velocity_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  update the status of a player
  /// </summary>
  public sealed partial class UpdatePlayerStatus : pb::IMessage<UpdatePlayerStatus> {
    private static readonly pb::MessageParser<UpdatePlayerStatus> _parser = new pb::MessageParser<UpdatePlayerStatus>(() => new UpdatePlayerStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePlayerStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStatus(UpdatePlayerStatus other) : this() {
      wentThrough_ = other.wentThrough_.Clone();
      lapCount_ = other.lapCount_;
      hasHitSFLineOnce_ = other.hasHitSFLineOnce_;
      cpCount_ = other.cpCount_;
      nextCheckpointNumber_ = other.nextCheckpointNumber_;
      supposedNextCheckpointNumber_ = other.supposedNextCheckpointNumber_;
      user_ = other.user_;
      virtualLapCount_ = other.virtualLapCount_;
      lastHittedCp_ = other.lastHittedCp_;
      secondLastHittedCp_ = other.secondLastHittedCp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStatus Clone() {
      return new UpdatePlayerStatus(this);
    }

    /// <summary>Field number for the "went_through" field.</summary>
    public const int WentThroughFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_wentThrough_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> wentThrough_ = new pbc::RepeatedField<bool>();
    /// <summary>
    ///  tableau de booléens
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> WentThrough {
      get { return wentThrough_; }
    }

    /// <summary>Field number for the "lap_count" field.</summary>
    public const int LapCountFieldNumber = 2;
    private int lapCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LapCount {
      get { return lapCount_; }
      set {
        lapCount_ = value;
      }
    }

    /// <summary>Field number for the "has_hit_s_f_line_once" field.</summary>
    public const int HasHitSFLineOnceFieldNumber = 3;
    private bool hasHitSFLineOnce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHitSFLineOnce {
      get { return hasHitSFLineOnce_; }
      set {
        hasHitSFLineOnce_ = value;
      }
    }

    /// <summary>Field number for the "cp_count" field.</summary>
    public const int CpCountFieldNumber = 4;
    private int cpCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CpCount {
      get { return cpCount_; }
      set {
        cpCount_ = value;
      }
    }

    /// <summary>Field number for the "next_checkpoint_number" field.</summary>
    public const int NextCheckpointNumberFieldNumber = 5;
    private int nextCheckpointNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextCheckpointNumber {
      get { return nextCheckpointNumber_; }
      set {
        nextCheckpointNumber_ = value;
      }
    }

    /// <summary>Field number for the "supposed_next_checkpoint_number" field.</summary>
    public const int SupposedNextCheckpointNumberFieldNumber = 6;
    private int supposedNextCheckpointNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SupposedNextCheckpointNumber {
      get { return supposedNextCheckpointNumber_; }
      set {
        supposedNextCheckpointNumber_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 7;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "virtual_lap_count" field.</summary>
    public const int VirtualLapCountFieldNumber = 8;
    private int virtualLapCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VirtualLapCount {
      get { return virtualLapCount_; }
      set {
        virtualLapCount_ = value;
      }
    }

    /// <summary>Field number for the "last_hitted_cp" field.</summary>
    public const int LastHittedCpFieldNumber = 9;
    private int lastHittedCp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastHittedCp {
      get { return lastHittedCp_; }
      set {
        lastHittedCp_ = value;
      }
    }

    /// <summary>Field number for the "second_last_hitted_cp" field.</summary>
    public const int SecondLastHittedCpFieldNumber = 10;
    private int secondLastHittedCp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondLastHittedCp {
      get { return secondLastHittedCp_; }
      set {
        secondLastHittedCp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePlayerStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePlayerStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!wentThrough_.Equals(other.wentThrough_)) return false;
      if (LapCount != other.LapCount) return false;
      if (HasHitSFLineOnce != other.HasHitSFLineOnce) return false;
      if (CpCount != other.CpCount) return false;
      if (NextCheckpointNumber != other.NextCheckpointNumber) return false;
      if (SupposedNextCheckpointNumber != other.SupposedNextCheckpointNumber) return false;
      if (User != other.User) return false;
      if (VirtualLapCount != other.VirtualLapCount) return false;
      if (LastHittedCp != other.LastHittedCp) return false;
      if (SecondLastHittedCp != other.SecondLastHittedCp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= wentThrough_.GetHashCode();
      if (LapCount != 0) hash ^= LapCount.GetHashCode();
      if (HasHitSFLineOnce != false) hash ^= HasHitSFLineOnce.GetHashCode();
      if (CpCount != 0) hash ^= CpCount.GetHashCode();
      if (NextCheckpointNumber != 0) hash ^= NextCheckpointNumber.GetHashCode();
      if (SupposedNextCheckpointNumber != 0) hash ^= SupposedNextCheckpointNumber.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (VirtualLapCount != 0) hash ^= VirtualLapCount.GetHashCode();
      if (LastHittedCp != 0) hash ^= LastHittedCp.GetHashCode();
      if (SecondLastHittedCp != 0) hash ^= SecondLastHittedCp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      wentThrough_.WriteTo(output, _repeated_wentThrough_codec);
      if (LapCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LapCount);
      }
      if (HasHitSFLineOnce != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasHitSFLineOnce);
      }
      if (CpCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CpCount);
      }
      if (NextCheckpointNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NextCheckpointNumber);
      }
      if (SupposedNextCheckpointNumber != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SupposedNextCheckpointNumber);
      }
      if (User.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(User);
      }
      if (VirtualLapCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VirtualLapCount);
      }
      if (LastHittedCp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LastHittedCp);
      }
      if (SecondLastHittedCp != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SecondLastHittedCp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += wentThrough_.CalculateSize(_repeated_wentThrough_codec);
      if (LapCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LapCount);
      }
      if (HasHitSFLineOnce != false) {
        size += 1 + 1;
      }
      if (CpCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpCount);
      }
      if (NextCheckpointNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextCheckpointNumber);
      }
      if (SupposedNextCheckpointNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SupposedNextCheckpointNumber);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (VirtualLapCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualLapCount);
      }
      if (LastHittedCp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastHittedCp);
      }
      if (SecondLastHittedCp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondLastHittedCp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePlayerStatus other) {
      if (other == null) {
        return;
      }
      wentThrough_.Add(other.wentThrough_);
      if (other.LapCount != 0) {
        LapCount = other.LapCount;
      }
      if (other.HasHitSFLineOnce != false) {
        HasHitSFLineOnce = other.HasHitSFLineOnce;
      }
      if (other.CpCount != 0) {
        CpCount = other.CpCount;
      }
      if (other.NextCheckpointNumber != 0) {
        NextCheckpointNumber = other.NextCheckpointNumber;
      }
      if (other.SupposedNextCheckpointNumber != 0) {
        SupposedNextCheckpointNumber = other.SupposedNextCheckpointNumber;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.VirtualLapCount != 0) {
        VirtualLapCount = other.VirtualLapCount;
      }
      if (other.LastHittedCp != 0) {
        LastHittedCp = other.LastHittedCp;
      }
      if (other.SecondLastHittedCp != 0) {
        SecondLastHittedCp = other.SecondLastHittedCp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            wentThrough_.AddEntriesFrom(input, _repeated_wentThrough_codec);
            break;
          }
          case 16: {
            LapCount = input.ReadInt32();
            break;
          }
          case 24: {
            HasHitSFLineOnce = input.ReadBool();
            break;
          }
          case 32: {
            CpCount = input.ReadInt32();
            break;
          }
          case 40: {
            NextCheckpointNumber = input.ReadInt32();
            break;
          }
          case 48: {
            SupposedNextCheckpointNumber = input.ReadInt32();
            break;
          }
          case 58: {
            User = input.ReadString();
            break;
          }
          case 64: {
            VirtualLapCount = input.ReadInt32();
            break;
          }
          case 72: {
            LastHittedCp = input.ReadInt32();
            break;
          }
          case 80: {
            SecondLastHittedCp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  request other players status
  /// </summary>
  public sealed partial class UpdatePlayerStatusRequest : pb::IMessage<UpdatePlayerStatusRequest> {
    private static readonly pb::MessageParser<UpdatePlayerStatusRequest> _parser = new pb::MessageParser<UpdatePlayerStatusRequest>(() => new UpdatePlayerStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePlayerStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStatusRequest(UpdatePlayerStatusRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerStatusRequest Clone() {
      return new UpdatePlayerStatusRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePlayerStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePlayerStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePlayerStatusRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  definition of a chat message
  /// </summary>
  public sealed partial class ChatMessage : pb::IMessage<ChatMessage> {
    private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage(ChatMessage other) : this() {
      content_ = other.content_;
      user_ = other.user_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage Clone() {
      return new ChatMessage(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (User != other.User) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (User.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 18: {
            User = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  when a user is disconnecting, he will automatically send this kind of message
  ///  to others
  /// </summary>
  public sealed partial class Disconnect : pb::IMessage<Disconnect> {
    private static readonly pb::MessageParser<Disconnect> _parser = new pb::MessageParser<Disconnect>(() => new Disconnect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Disconnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Disconnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Disconnect(Disconnect other) : this() {
      user_ = other.user_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Disconnect Clone() {
      return new Disconnect(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Disconnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Disconnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (User != other.User) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (User.Length != 0) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (User.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Disconnect other) {
      if (other == null) {
        return;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            User = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  request to create a new room
  /// </summary>
  public sealed partial class CreateRoom : pb::IMessage<CreateRoom> {
    private static readonly pb::MessageParser<CreateRoom> _parser = new pb::MessageParser<CreateRoom>(() => new CreateRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom(CreateRoom other) : this() {
      roomType_ = other.roomType_;
      idCircuit_ = other.idCircuit_;
      maxPlayers_ = other.maxPlayers_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom Clone() {
      return new CreateRoom(this);
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private int roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "id_circuit" field.</summary>
    public const int IdCircuitFieldNumber = 2;
    private int idCircuit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdCircuit {
      get { return idCircuit_; }
      set {
        idCircuit_ = value;
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 3;
    private int maxPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomType != other.RoomType) return false;
      if (IdCircuit != other.IdCircuit) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      if (IdCircuit != 0) hash ^= IdCircuit.GetHashCode();
      if (MaxPlayers != 0) hash ^= MaxPlayers.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomType);
      }
      if (IdCircuit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IdCircuit);
      }
      if (MaxPlayers != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxPlayers);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      if (IdCircuit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdCircuit);
      }
      if (MaxPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayers);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoom other) {
      if (other == null) {
        return;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      if (other.IdCircuit != 0) {
        IdCircuit = other.IdCircuit;
      }
      if (other.MaxPlayers != 0) {
        MaxPlayers = other.MaxPlayers;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomType = input.ReadInt32();
            break;
          }
          case 16: {
            IdCircuit = input.ReadInt32();
            break;
          }
          case 24: {
            MaxPlayers = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomListRequest : pb::IMessage<RoomListRequest> {
    private static readonly pb::MessageParser<RoomListRequest> _parser = new pb::MessageParser<RoomListRequest>(() => new RoomListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListRequest(RoomListRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListRequest Clone() {
      return new RoomListRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomListRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RoomListResponse : pb::IMessage<RoomListResponse> {
    private static readonly pb::MessageParser<RoomListResponse> _parser = new pb::MessageParser<RoomListResponse>(() => new RoomListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListResponse(RoomListResponse other) : this() {
      roomList_ = other.roomList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListResponse Clone() {
      return new RoomListResponse(this);
    }

    /// <summary>Field number for the "room_list" field.</summary>
    public const int RoomListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.RoomList> _repeated_roomList_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.RoomList.Parser);
    private readonly pbc::RepeatedField<global::Protocol.RoomList> roomList_ = new pbc::RepeatedField<global::Protocol.RoomList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.RoomList> RoomList {
      get { return roomList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roomList_.Equals(other.roomList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roomList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roomList_.WriteTo(output, _repeated_roomList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roomList_.CalculateSize(_repeated_roomList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomListResponse other) {
      if (other == null) {
        return;
      }
      roomList_.Add(other.roomList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roomList_.AddEntriesFrom(input, _repeated_roomList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomList : pb::IMessage<RoomList> {
    private static readonly pb::MessageParser<RoomList> _parser = new pb::MessageParser<RoomList>(() => new RoomList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomList(RoomList other) : this() {
      id_ = other.id_;
      roomType_ = other.roomType_;
      idCircuit_ = other.idCircuit_;
      maxPlayers_ = other.maxPlayers_;
      nbPlayers_ = other.nbPlayers_;
      playersUsername_ = other.playersUsername_.Clone();
      playersNbRaces_ = other.playersNbRaces_.Clone();
      playersNbWins_ = other.playersNbWins_.Clone();
      playersRecord_ = other.playersRecord_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomList Clone() {
      return new RoomList(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 2;
    private int roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "id_circuit" field.</summary>
    public const int IdCircuitFieldNumber = 3;
    private int idCircuit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdCircuit {
      get { return idCircuit_; }
      set {
        idCircuit_ = value;
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 4;
    private int maxPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "nb_players" field.</summary>
    public const int NbPlayersFieldNumber = 5;
    private int nbPlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NbPlayers {
      get { return nbPlayers_; }
      set {
        nbPlayers_ = value;
      }
    }

    /// <summary>Field number for the "players_username" field.</summary>
    public const int PlayersUsernameFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_playersUsername_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> playersUsername_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PlayersUsername {
      get { return playersUsername_; }
    }

    /// <summary>Field number for the "players_nb_races" field.</summary>
    public const int PlayersNbRacesFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_playersNbRaces_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> playersNbRaces_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayersNbRaces {
      get { return playersNbRaces_; }
    }

    /// <summary>Field number for the "players_nb_wins" field.</summary>
    public const int PlayersNbWinsFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_playersNbWins_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> playersNbWins_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayersNbWins {
      get { return playersNbWins_; }
    }

    /// <summary>Field number for the "players_record" field.</summary>
    public const int PlayersRecordFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_playersRecord_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> playersRecord_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PlayersRecord {
      get { return playersRecord_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (RoomType != other.RoomType) return false;
      if (IdCircuit != other.IdCircuit) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      if (NbPlayers != other.NbPlayers) return false;
      if(!playersUsername_.Equals(other.playersUsername_)) return false;
      if(!playersNbRaces_.Equals(other.playersNbRaces_)) return false;
      if(!playersNbWins_.Equals(other.playersNbWins_)) return false;
      if(!playersRecord_.Equals(other.playersRecord_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      if (IdCircuit != 0) hash ^= IdCircuit.GetHashCode();
      if (MaxPlayers != 0) hash ^= MaxPlayers.GetHashCode();
      if (NbPlayers != 0) hash ^= NbPlayers.GetHashCode();
      hash ^= playersUsername_.GetHashCode();
      hash ^= playersNbRaces_.GetHashCode();
      hash ^= playersNbWins_.GetHashCode();
      hash ^= playersRecord_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (RoomType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomType);
      }
      if (IdCircuit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IdCircuit);
      }
      if (MaxPlayers != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxPlayers);
      }
      if (NbPlayers != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NbPlayers);
      }
      playersUsername_.WriteTo(output, _repeated_playersUsername_codec);
      playersNbRaces_.WriteTo(output, _repeated_playersNbRaces_codec);
      playersNbWins_.WriteTo(output, _repeated_playersNbWins_codec);
      playersRecord_.WriteTo(output, _repeated_playersRecord_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      if (IdCircuit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdCircuit);
      }
      if (MaxPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayers);
      }
      if (NbPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NbPlayers);
      }
      size += playersUsername_.CalculateSize(_repeated_playersUsername_codec);
      size += playersNbRaces_.CalculateSize(_repeated_playersNbRaces_codec);
      size += playersNbWins_.CalculateSize(_repeated_playersNbWins_codec);
      size += playersRecord_.CalculateSize(_repeated_playersRecord_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomList other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      if (other.IdCircuit != 0) {
        IdCircuit = other.IdCircuit;
      }
      if (other.MaxPlayers != 0) {
        MaxPlayers = other.MaxPlayers;
      }
      if (other.NbPlayers != 0) {
        NbPlayers = other.NbPlayers;
      }
      playersUsername_.Add(other.playersUsername_);
      playersNbRaces_.Add(other.playersNbRaces_);
      playersNbWins_.Add(other.playersNbWins_);
      playersRecord_.Add(other.playersRecord_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            RoomType = input.ReadInt32();
            break;
          }
          case 24: {
            IdCircuit = input.ReadInt32();
            break;
          }
          case 32: {
            MaxPlayers = input.ReadInt32();
            break;
          }
          case 40: {
            NbPlayers = input.ReadInt32();
            break;
          }
          case 50: {
            playersUsername_.AddEntriesFrom(input, _repeated_playersUsername_codec);
            break;
          }
          case 58:
          case 56: {
            playersNbRaces_.AddEntriesFrom(input, _repeated_playersNbRaces_codec);
            break;
          }
          case 66:
          case 64: {
            playersNbWins_.AddEntriesFrom(input, _repeated_playersNbWins_codec);
            break;
          }
          case 74: {
            playersRecord_.AddEntriesFrom(input, _repeated_playersRecord_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  starts a game
  /// </summary>
  public sealed partial class StartRoom : pb::IMessage<StartRoom> {
    private static readonly pb::MessageParser<StartRoom> _parser = new pb::MessageParser<StartRoom>(() => new StartRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRoom(StartRoom other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRoom Clone() {
      return new StartRoom(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartRoom other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  join a room
  /// </summary>
  public sealed partial class JoinRoom : pb::IMessage<JoinRoom> {
    private static readonly pb::MessageParser<JoinRoom> _parser = new pb::MessageParser<JoinRoom>(() => new JoinRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoom(JoinRoom other) : this() {
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoom Clone() {
      return new JoinRoom(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoom other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartingPosition : pb::IMessage<StartingPosition> {
    private static readonly pb::MessageParser<StartingPosition> _parser = new pb::MessageParser<StartingPosition>(() => new StartingPosition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartingPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartingPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartingPosition(StartingPosition other) : this() {
      position_ = other.position_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartingPosition Clone() {
      return new StartingPosition(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_position_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> position_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Position {
      get { return position_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartingPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartingPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!position_.Equals(other.position_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= position_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      position_.WriteTo(output, _repeated_position_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += position_.CalculateSize(_repeated_position_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartingPosition other) {
      if (other == null) {
        return;
      }
      position_.Add(other.position_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            position_.AddEntriesFrom(input, _repeated_position_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterRequest : pb::IMessage<RegisterRequest> {
    private static readonly pb::MessageParser<RegisterRequest> _parser = new pb::MessageParser<RegisterRequest>(() => new RegisterRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest(RegisterRequest other) : this() {
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest Clone() {
      return new RegisterRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterResponse : pb::IMessage<RegisterResponse> {
    private static readonly pb::MessageParser<RegisterResponse> _parser = new pb::MessageParser<RegisterResponse>(() => new RegisterResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse(RegisterResponse other) : this() {
      success_ = other.success_;
      username_ = other.username_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse Clone() {
      return new RegisterResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Username != other.Username) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      success_ = other.success_;
      username_ = other.username_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Username != other.Username) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  message that can be exchanged between the client and the server
  ///  TYPE = "chat_message" if ChatMessage (for example)
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.MessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      type_ = other.type_;
      switch (other.MsgCase) {
        case MsgOneofCase.ChatMessage:
          ChatMessage = other.ChatMessage.Clone();
          break;
        case MsgOneofCase.UpdatePlayerPosition:
          UpdatePlayerPosition = other.UpdatePlayerPosition.Clone();
          break;
        case MsgOneofCase.UpdatePlayerStatus:
          UpdatePlayerStatus = other.UpdatePlayerStatus.Clone();
          break;
        case MsgOneofCase.Disconnect:
          Disconnect = other.Disconnect.Clone();
          break;
        case MsgOneofCase.UpdatePlayerStatusRequest:
          UpdatePlayerStatusRequest = other.UpdatePlayerStatusRequest.Clone();
          break;
        case MsgOneofCase.CreateRoom:
          CreateRoom = other.CreateRoom.Clone();
          break;
        case MsgOneofCase.StartRoom:
          StartRoom = other.StartRoom.Clone();
          break;
        case MsgOneofCase.JoinRoom:
          JoinRoom = other.JoinRoom.Clone();
          break;
        case MsgOneofCase.StartingPosition:
          StartingPosition = other.StartingPosition.Clone();
          break;
        case MsgOneofCase.RegisterRequest:
          RegisterRequest = other.RegisterRequest.Clone();
          break;
        case MsgOneofCase.LoginRequest:
          LoginRequest = other.LoginRequest.Clone();
          break;
        case MsgOneofCase.RegisterResponse:
          RegisterResponse = other.RegisterResponse.Clone();
          break;
        case MsgOneofCase.LoginResponse:
          LoginResponse = other.LoginResponse.Clone();
          break;
        case MsgOneofCase.RoomListRequest:
          RoomListRequest = other.RoomListRequest.Clone();
          break;
        case MsgOneofCase.RoomListResponse:
          RoomListResponse = other.RoomListResponse.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    ///  easier for fetching datas
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chat_message" field.</summary>
    public const int ChatMessageFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ChatMessage ChatMessage {
      get { return msgCase_ == MsgOneofCase.ChatMessage ? (global::Protocol.ChatMessage) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ChatMessage;
      }
    }

    /// <summary>Field number for the "update_player_position" field.</summary>
    public const int UpdatePlayerPositionFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.UpdatePlayerPosition UpdatePlayerPosition {
      get { return msgCase_ == MsgOneofCase.UpdatePlayerPosition ? (global::Protocol.UpdatePlayerPosition) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.UpdatePlayerPosition;
      }
    }

    /// <summary>Field number for the "update_player_status" field.</summary>
    public const int UpdatePlayerStatusFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.UpdatePlayerStatus UpdatePlayerStatus {
      get { return msgCase_ == MsgOneofCase.UpdatePlayerStatus ? (global::Protocol.UpdatePlayerStatus) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.UpdatePlayerStatus;
      }
    }

    /// <summary>Field number for the "disconnect" field.</summary>
    public const int DisconnectFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Disconnect Disconnect {
      get { return msgCase_ == MsgOneofCase.Disconnect ? (global::Protocol.Disconnect) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Disconnect;
      }
    }

    /// <summary>Field number for the "update_player_status_request" field.</summary>
    public const int UpdatePlayerStatusRequestFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.UpdatePlayerStatusRequest UpdatePlayerStatusRequest {
      get { return msgCase_ == MsgOneofCase.UpdatePlayerStatusRequest ? (global::Protocol.UpdatePlayerStatusRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.UpdatePlayerStatusRequest;
      }
    }

    /// <summary>Field number for the "create_room" field.</summary>
    public const int CreateRoomFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.CreateRoom CreateRoom {
      get { return msgCase_ == MsgOneofCase.CreateRoom ? (global::Protocol.CreateRoom) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CreateRoom;
      }
    }

    /// <summary>Field number for the "start_room" field.</summary>
    public const int StartRoomFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.StartRoom StartRoom {
      get { return msgCase_ == MsgOneofCase.StartRoom ? (global::Protocol.StartRoom) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StartRoom;
      }
    }

    /// <summary>Field number for the "join_room" field.</summary>
    public const int JoinRoomFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.JoinRoom JoinRoom {
      get { return msgCase_ == MsgOneofCase.JoinRoom ? (global::Protocol.JoinRoom) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.JoinRoom;
      }
    }

    /// <summary>Field number for the "starting_position" field.</summary>
    public const int StartingPositionFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.StartingPosition StartingPosition {
      get { return msgCase_ == MsgOneofCase.StartingPosition ? (global::Protocol.StartingPosition) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StartingPosition;
      }
    }

    /// <summary>Field number for the "register_request" field.</summary>
    public const int RegisterRequestFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RegisterRequest RegisterRequest {
      get { return msgCase_ == MsgOneofCase.RegisterRequest ? (global::Protocol.RegisterRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RegisterRequest;
      }
    }

    /// <summary>Field number for the "login_request" field.</summary>
    public const int LoginRequestFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.LoginRequest LoginRequest {
      get { return msgCase_ == MsgOneofCase.LoginRequest ? (global::Protocol.LoginRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.LoginRequest;
      }
    }

    /// <summary>Field number for the "register_response" field.</summary>
    public const int RegisterResponseFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RegisterResponse RegisterResponse {
      get { return msgCase_ == MsgOneofCase.RegisterResponse ? (global::Protocol.RegisterResponse) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RegisterResponse;
      }
    }

    /// <summary>Field number for the "login_response" field.</summary>
    public const int LoginResponseFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.LoginResponse LoginResponse {
      get { return msgCase_ == MsgOneofCase.LoginResponse ? (global::Protocol.LoginResponse) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.LoginResponse;
      }
    }

    /// <summary>Field number for the "room_list_request" field.</summary>
    public const int RoomListRequestFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RoomListRequest RoomListRequest {
      get { return msgCase_ == MsgOneofCase.RoomListRequest ? (global::Protocol.RoomListRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RoomListRequest;
      }
    }

    /// <summary>Field number for the "room_list_response" field.</summary>
    public const int RoomListResponseFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.RoomListResponse RoomListResponse {
      get { return msgCase_ == MsgOneofCase.RoomListResponse ? (global::Protocol.RoomListResponse) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RoomListResponse;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      ChatMessage = 2,
      UpdatePlayerPosition = 3,
      UpdatePlayerStatus = 4,
      Disconnect = 5,
      UpdatePlayerStatusRequest = 6,
      CreateRoom = 7,
      StartRoom = 8,
      JoinRoom = 9,
      StartingPosition = 10,
      RegisterRequest = 11,
      LoginRequest = 12,
      RegisterResponse = 13,
      LoginResponse = 14,
      RoomListRequest = 15,
      RoomListResponse = 16,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(ChatMessage, other.ChatMessage)) return false;
      if (!object.Equals(UpdatePlayerPosition, other.UpdatePlayerPosition)) return false;
      if (!object.Equals(UpdatePlayerStatus, other.UpdatePlayerStatus)) return false;
      if (!object.Equals(Disconnect, other.Disconnect)) return false;
      if (!object.Equals(UpdatePlayerStatusRequest, other.UpdatePlayerStatusRequest)) return false;
      if (!object.Equals(CreateRoom, other.CreateRoom)) return false;
      if (!object.Equals(StartRoom, other.StartRoom)) return false;
      if (!object.Equals(JoinRoom, other.JoinRoom)) return false;
      if (!object.Equals(StartingPosition, other.StartingPosition)) return false;
      if (!object.Equals(RegisterRequest, other.RegisterRequest)) return false;
      if (!object.Equals(LoginRequest, other.LoginRequest)) return false;
      if (!object.Equals(RegisterResponse, other.RegisterResponse)) return false;
      if (!object.Equals(LoginResponse, other.LoginResponse)) return false;
      if (!object.Equals(RoomListRequest, other.RoomListRequest)) return false;
      if (!object.Equals(RoomListResponse, other.RoomListResponse)) return false;
      if (MsgCase != other.MsgCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (msgCase_ == MsgOneofCase.ChatMessage) hash ^= ChatMessage.GetHashCode();
      if (msgCase_ == MsgOneofCase.UpdatePlayerPosition) hash ^= UpdatePlayerPosition.GetHashCode();
      if (msgCase_ == MsgOneofCase.UpdatePlayerStatus) hash ^= UpdatePlayerStatus.GetHashCode();
      if (msgCase_ == MsgOneofCase.Disconnect) hash ^= Disconnect.GetHashCode();
      if (msgCase_ == MsgOneofCase.UpdatePlayerStatusRequest) hash ^= UpdatePlayerStatusRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.CreateRoom) hash ^= CreateRoom.GetHashCode();
      if (msgCase_ == MsgOneofCase.StartRoom) hash ^= StartRoom.GetHashCode();
      if (msgCase_ == MsgOneofCase.JoinRoom) hash ^= JoinRoom.GetHashCode();
      if (msgCase_ == MsgOneofCase.StartingPosition) hash ^= StartingPosition.GetHashCode();
      if (msgCase_ == MsgOneofCase.RegisterRequest) hash ^= RegisterRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.LoginRequest) hash ^= LoginRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.RegisterResponse) hash ^= RegisterResponse.GetHashCode();
      if (msgCase_ == MsgOneofCase.LoginResponse) hash ^= LoginResponse.GetHashCode();
      if (msgCase_ == MsgOneofCase.RoomListRequest) hash ^= RoomListRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.RoomListResponse) hash ^= RoomListResponse.GetHashCode();
      hash ^= (int) msgCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (msgCase_ == MsgOneofCase.ChatMessage) {
        output.WriteRawTag(18);
        output.WriteMessage(ChatMessage);
      }
      if (msgCase_ == MsgOneofCase.UpdatePlayerPosition) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdatePlayerPosition);
      }
      if (msgCase_ == MsgOneofCase.UpdatePlayerStatus) {
        output.WriteRawTag(34);
        output.WriteMessage(UpdatePlayerStatus);
      }
      if (msgCase_ == MsgOneofCase.Disconnect) {
        output.WriteRawTag(42);
        output.WriteMessage(Disconnect);
      }
      if (msgCase_ == MsgOneofCase.UpdatePlayerStatusRequest) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdatePlayerStatusRequest);
      }
      if (msgCase_ == MsgOneofCase.CreateRoom) {
        output.WriteRawTag(58);
        output.WriteMessage(CreateRoom);
      }
      if (msgCase_ == MsgOneofCase.StartRoom) {
        output.WriteRawTag(66);
        output.WriteMessage(StartRoom);
      }
      if (msgCase_ == MsgOneofCase.JoinRoom) {
        output.WriteRawTag(74);
        output.WriteMessage(JoinRoom);
      }
      if (msgCase_ == MsgOneofCase.StartingPosition) {
        output.WriteRawTag(82);
        output.WriteMessage(StartingPosition);
      }
      if (msgCase_ == MsgOneofCase.RegisterRequest) {
        output.WriteRawTag(90);
        output.WriteMessage(RegisterRequest);
      }
      if (msgCase_ == MsgOneofCase.LoginRequest) {
        output.WriteRawTag(98);
        output.WriteMessage(LoginRequest);
      }
      if (msgCase_ == MsgOneofCase.RegisterResponse) {
        output.WriteRawTag(106);
        output.WriteMessage(RegisterResponse);
      }
      if (msgCase_ == MsgOneofCase.LoginResponse) {
        output.WriteRawTag(114);
        output.WriteMessage(LoginResponse);
      }
      if (msgCase_ == MsgOneofCase.RoomListRequest) {
        output.WriteRawTag(122);
        output.WriteMessage(RoomListRequest);
      }
      if (msgCase_ == MsgOneofCase.RoomListResponse) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(RoomListResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (msgCase_ == MsgOneofCase.ChatMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatMessage);
      }
      if (msgCase_ == MsgOneofCase.UpdatePlayerPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatePlayerPosition);
      }
      if (msgCase_ == MsgOneofCase.UpdatePlayerStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatePlayerStatus);
      }
      if (msgCase_ == MsgOneofCase.Disconnect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Disconnect);
      }
      if (msgCase_ == MsgOneofCase.UpdatePlayerStatusRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatePlayerStatusRequest);
      }
      if (msgCase_ == MsgOneofCase.CreateRoom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateRoom);
      }
      if (msgCase_ == MsgOneofCase.StartRoom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartRoom);
      }
      if (msgCase_ == MsgOneofCase.JoinRoom) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinRoom);
      }
      if (msgCase_ == MsgOneofCase.StartingPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartingPosition);
      }
      if (msgCase_ == MsgOneofCase.RegisterRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterRequest);
      }
      if (msgCase_ == MsgOneofCase.LoginRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginRequest);
      }
      if (msgCase_ == MsgOneofCase.RegisterResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterResponse);
      }
      if (msgCase_ == MsgOneofCase.LoginResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginResponse);
      }
      if (msgCase_ == MsgOneofCase.RoomListRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomListRequest);
      }
      if (msgCase_ == MsgOneofCase.RoomListResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RoomListResponse);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.ChatMessage:
          ChatMessage = other.ChatMessage;
          break;
        case MsgOneofCase.UpdatePlayerPosition:
          UpdatePlayerPosition = other.UpdatePlayerPosition;
          break;
        case MsgOneofCase.UpdatePlayerStatus:
          UpdatePlayerStatus = other.UpdatePlayerStatus;
          break;
        case MsgOneofCase.Disconnect:
          Disconnect = other.Disconnect;
          break;
        case MsgOneofCase.UpdatePlayerStatusRequest:
          UpdatePlayerStatusRequest = other.UpdatePlayerStatusRequest;
          break;
        case MsgOneofCase.CreateRoom:
          CreateRoom = other.CreateRoom;
          break;
        case MsgOneofCase.StartRoom:
          StartRoom = other.StartRoom;
          break;
        case MsgOneofCase.JoinRoom:
          JoinRoom = other.JoinRoom;
          break;
        case MsgOneofCase.StartingPosition:
          StartingPosition = other.StartingPosition;
          break;
        case MsgOneofCase.RegisterRequest:
          RegisterRequest = other.RegisterRequest;
          break;
        case MsgOneofCase.LoginRequest:
          LoginRequest = other.LoginRequest;
          break;
        case MsgOneofCase.RegisterResponse:
          RegisterResponse = other.RegisterResponse;
          break;
        case MsgOneofCase.LoginResponse:
          LoginResponse = other.LoginResponse;
          break;
        case MsgOneofCase.RoomListRequest:
          RoomListRequest = other.RoomListRequest;
          break;
        case MsgOneofCase.RoomListResponse:
          RoomListResponse = other.RoomListResponse;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            global::Protocol.ChatMessage subBuilder = new global::Protocol.ChatMessage();
            if (msgCase_ == MsgOneofCase.ChatMessage) {
              subBuilder.MergeFrom(ChatMessage);
            }
            input.ReadMessage(subBuilder);
            ChatMessage = subBuilder;
            break;
          }
          case 26: {
            global::Protocol.UpdatePlayerPosition subBuilder = new global::Protocol.UpdatePlayerPosition();
            if (msgCase_ == MsgOneofCase.UpdatePlayerPosition) {
              subBuilder.MergeFrom(UpdatePlayerPosition);
            }
            input.ReadMessage(subBuilder);
            UpdatePlayerPosition = subBuilder;
            break;
          }
          case 34: {
            global::Protocol.UpdatePlayerStatus subBuilder = new global::Protocol.UpdatePlayerStatus();
            if (msgCase_ == MsgOneofCase.UpdatePlayerStatus) {
              subBuilder.MergeFrom(UpdatePlayerStatus);
            }
            input.ReadMessage(subBuilder);
            UpdatePlayerStatus = subBuilder;
            break;
          }
          case 42: {
            global::Protocol.Disconnect subBuilder = new global::Protocol.Disconnect();
            if (msgCase_ == MsgOneofCase.Disconnect) {
              subBuilder.MergeFrom(Disconnect);
            }
            input.ReadMessage(subBuilder);
            Disconnect = subBuilder;
            break;
          }
          case 50: {
            global::Protocol.UpdatePlayerStatusRequest subBuilder = new global::Protocol.UpdatePlayerStatusRequest();
            if (msgCase_ == MsgOneofCase.UpdatePlayerStatusRequest) {
              subBuilder.MergeFrom(UpdatePlayerStatusRequest);
            }
            input.ReadMessage(subBuilder);
            UpdatePlayerStatusRequest = subBuilder;
            break;
          }
          case 58: {
            global::Protocol.CreateRoom subBuilder = new global::Protocol.CreateRoom();
            if (msgCase_ == MsgOneofCase.CreateRoom) {
              subBuilder.MergeFrom(CreateRoom);
            }
            input.ReadMessage(subBuilder);
            CreateRoom = subBuilder;
            break;
          }
          case 66: {
            global::Protocol.StartRoom subBuilder = new global::Protocol.StartRoom();
            if (msgCase_ == MsgOneofCase.StartRoom) {
              subBuilder.MergeFrom(StartRoom);
            }
            input.ReadMessage(subBuilder);
            StartRoom = subBuilder;
            break;
          }
          case 74: {
            global::Protocol.JoinRoom subBuilder = new global::Protocol.JoinRoom();
            if (msgCase_ == MsgOneofCase.JoinRoom) {
              subBuilder.MergeFrom(JoinRoom);
            }
            input.ReadMessage(subBuilder);
            JoinRoom = subBuilder;
            break;
          }
          case 82: {
            global::Protocol.StartingPosition subBuilder = new global::Protocol.StartingPosition();
            if (msgCase_ == MsgOneofCase.StartingPosition) {
              subBuilder.MergeFrom(StartingPosition);
            }
            input.ReadMessage(subBuilder);
            StartingPosition = subBuilder;
            break;
          }
          case 90: {
            global::Protocol.RegisterRequest subBuilder = new global::Protocol.RegisterRequest();
            if (msgCase_ == MsgOneofCase.RegisterRequest) {
              subBuilder.MergeFrom(RegisterRequest);
            }
            input.ReadMessage(subBuilder);
            RegisterRequest = subBuilder;
            break;
          }
          case 98: {
            global::Protocol.LoginRequest subBuilder = new global::Protocol.LoginRequest();
            if (msgCase_ == MsgOneofCase.LoginRequest) {
              subBuilder.MergeFrom(LoginRequest);
            }
            input.ReadMessage(subBuilder);
            LoginRequest = subBuilder;
            break;
          }
          case 106: {
            global::Protocol.RegisterResponse subBuilder = new global::Protocol.RegisterResponse();
            if (msgCase_ == MsgOneofCase.RegisterResponse) {
              subBuilder.MergeFrom(RegisterResponse);
            }
            input.ReadMessage(subBuilder);
            RegisterResponse = subBuilder;
            break;
          }
          case 114: {
            global::Protocol.LoginResponse subBuilder = new global::Protocol.LoginResponse();
            if (msgCase_ == MsgOneofCase.LoginResponse) {
              subBuilder.MergeFrom(LoginResponse);
            }
            input.ReadMessage(subBuilder);
            LoginResponse = subBuilder;
            break;
          }
          case 122: {
            global::Protocol.RoomListRequest subBuilder = new global::Protocol.RoomListRequest();
            if (msgCase_ == MsgOneofCase.RoomListRequest) {
              subBuilder.MergeFrom(RoomListRequest);
            }
            input.ReadMessage(subBuilder);
            RoomListRequest = subBuilder;
            break;
          }
          case 130: {
            global::Protocol.RoomListResponse subBuilder = new global::Protocol.RoomListResponse();
            if (msgCase_ == MsgOneofCase.RoomListResponse) {
              subBuilder.MergeFrom(RoomListResponse);
            }
            input.ReadMessage(subBuilder);
            RoomListResponse = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
